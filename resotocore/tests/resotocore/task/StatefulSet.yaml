apiVersion: v1
kind: Service
metadata:
  name: db-cluster
  labels:
    app: db-cluster
spec:
  ports:
    - port: 8529
      name: db
  clusterIP: None
  selector:
    app: db-cluster-instance
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: db-cluster
  labels:
    app: db-cluster
spec:
  serviceName: db-cluster
  replicas: 1  # adjust this number to the number of pods you want
  selector:
    matchLabels:
      app: db-cluster-instance
  template:
    metadata:
      labels:
        app: db-cluster-instance
    spec:
      containers:
        - name: server
          command:
            - /usr/sbin/arangod
            - --database.directory=/data
            - --foxx.queues=true
            - --log.level=INFO
            - --log.output=+
            - --server.authentication=true
            - --server.endpoint=tcp://[::]:8529
            - --server.statistics=true
            - --server.storage-engine=rocksdb
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          image: "arangodb/arangodb:3.10.4"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /_admin/server/availability
              port: server
              scheme: HTTP
            failureThreshold: 10
            initialDelaySeconds: 900
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              path: /_admin/server/availability
              port: server
              scheme: HTTP
            failureThreshold: 10
            initialDelaySeconds: 2
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 2
          ports:
            - containerPort: 8529
              name: server
              protocol: TCP
          securityContext:
            capabilities:
              drop:
                - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /data
              name: db-volume-pvc
            - mountPath: /lifecycle/tools
              name: lifecycle
            - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
              name: kube-api-access
              readOnly: true

      initContainers:
        - name: upgrade-database
          command:
            - /usr/sbin/arangod
            - --database.directory=/data
            - --database.auto-upgrade
          image: "arangodb/arangodb:3.10.4"
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              drop:
                - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /data
              name: db-volume-pvc

      dnsPolicy: ClusterFirst
      hostname: db
      enableServiceLinks: true
      tolerations:
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists

      volumes:
        - emptyDir: { }
          name: lifecycle
        - name: kube-api-access
          projected:
            defaultMode: 420
            sources:
              - serviceAccountToken:
                  expirationSeconds: 3607
                  path: token
              - configMap:
                  items:
                    - key: ca.crt
                      path: ca.crt
                  name: kube-root-ca.crt
              - downwardAPI:
                  items:
                    - fieldRef:
                        apiVersion: v1
                        fieldPath: metadata.namespace
                      path: namespace

  volumeClaimTemplates:
    - metadata:
        finalizers:
          - kubernetes.io/pvc-protection
        name: db-volume-pvc
      spec:
        accessModes:
          - ReadWriteOnce
        # storageClassName: hcloud-volumes
        resources:
          requests:
            storage: 1Gi
