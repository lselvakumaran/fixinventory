AWSTemplateFormatVersion: 2010-09-09
Description: Fix Inventory Access

Parameters:
  FixInventoryAccountID:
    Description: The Account ID where Fix Inventory has been deployed
    Type: Number
  RoleName:
    Description: The name of the role Fix Inventory uses to run and collect resources
    Type: String
    Default: FixInventoryAccess

Outputs:
  FixInventoryAccessRoleName:
    Description: Name of the Fix Inventory Access Role
    Value: !GetAtt FixInventoryAccessRoleNameFunction.role_name
  FixInventoryAccessRoleArn:
    Description: ARN of the Fix Inventory Access Role
    Value: !GetAtt CrossAccountAccessRoleForFixInventory.Arn

Resources:
  FixInventoryRoleExistsCheckFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import urllib3
          import json
          import secrets
          import boto3
          from botocore.exceptions import ClientError
          http = urllib3.PoolManager()
          def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
              responseUrl = event["ResponseURL"]
              responseBody = {}
              responseBody["Status"] = responseStatus
              responseBody["Reason"] = "See the details in CloudWatch Log Stream: " + context.log_stream_name
              responseBody["PhysicalResourceId"] = physicalResourceId or context.log_stream_name
              responseBody["StackId"] = event["StackId"]
              responseBody["RequestId"] = event["RequestId"]
              responseBody["LogicalResourceId"] = event["LogicalResourceId"]
              responseBody["NoEcho"] = noEcho
              responseBody["Data"] = responseData
              json_response_body = json.dumps(responseBody)
              headers = {"Content-Type": "", "Content-Length": str(len(json_response_body))}
              try:
                  response = http.request("PUT", responseUrl, body=json_response_body.encode("utf-8"), headers=headers)
              except Exception as e:
                  print("send(..) failed executing requests.put(..): " + str(e))
          def fix_role_check(event, context):
              role_name = event["ResourceProperties"].get("RoleName", "FixInventoryAccess")
              response_data = {"role_name": role_name}
              if event.get("RequestType") in ("Delete", "Update"):
                  send(event, context, "SUCCESS", response_data)
                  return
              try:
                  iam = boto3.client("iam")
                  try:
                      iam.get_role(RoleName=role_name)
                      print(f"Role {role_name} already exists - generating new role name")
                      response_data["role_name"] = f"{role_name}-{secrets.token_hex(6)}"
                  except ClientError as e:
                      if e.response["Error"]["Code"] == "NoSuchEntity":
                          print(f"Role {role_name} does not exist - keeping provided role name")
                          response_data["role_name"] = role_name
                      else:
                          raise e
              except Exception as e:
                  print("fix_role_check(..) failed: " + str(e))
                  send(event, context, "FAILED", response_data)
                  return
              send(event, context, "SUCCESS", response_data)
      Handler: index.fix_role_check
      Runtime: python3.9
      Timeout: 30
      Role: !GetAtt FixInventoryRoleExistsCheckExecutionRole.Arn

  FixInventoryRoleExistsCheckExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: FixInventoryRoleExistsCheckExecutionPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: 'arn:aws:logs:*:*:*'
          - Effect: Allow
            Action: iam:GetRole
            Resource: '*'

  FixInventoryAccessRoleNameFunction:
    Type: Custom::Function
    Properties:
      RoleName: !Ref RoleName
      ServiceToken: !GetAtt FixInventoryRoleExistsCheckFunction.Arn

  CrossAccountAccessRoleForFixInventory:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !GetAtt FixInventoryAccessRoleNameFunction.role_name
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Join ['', ['arn:aws:iam::', !Ref FixInventoryAccountID, ':root']]
          Action:
          - 'sts:AssumeRole'
          - 'sts:TagSession'
      MaxSessionDuration: 10800
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/ReadOnlyAccess'
      Policies:
