# This is the Fix Inventory base container. It includes CPython and is used
# as the common base for all the other containers.
FROM python:3.12.2-slim-bookworm AS build-env
ENV DEBIAN_FRONTEND=noninteractive
ENV LANG="en_US.UTF-8"
ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG TESTS
ARG SOURCE_COMMIT
ARG ARANGO_VERSION=3.11.8

ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
RUN echo "I am running on ${BUILDPLATFORM}, building for ${TARGETPLATFORM}"

WORKDIR /
RUN apt-get update \
    && apt-get -y --no-install-recommends install apt-utils \
    && apt-get -y dist-upgrade \
    && apt-get -y install \
        build-essential \
        rustc \
        cargo \
        curl \
        shellcheck \
        libffi-dev \
        libssl-dev \
        linux-headers-generic \
        libffi8 \
        openssl \
        procps \
        dateutils \
        ca-certificates \
        locales \
    && echo 'LANG="en_US.UTF-8"' > /etc/default/locale \
    && echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen \
    && rm -f /bin/sh \
    && ln -s /bin/bash /bin/sh \
    && locale-gen

# Create CPython venv
WORKDIR /usr/local
RUN python3 -m venv fix-venv-python3

# Download and install Python test tools
RUN . /usr/local/fix-venv-python3/bin/activate && python -m pip install -U pip wheel tox flake8

# Prepare whl build env
RUN mkdir -p /build /build-python

# Build Fix Inventory
COPY requirements-extra.txt /usr/src/requirements-extra.txt
COPY fixlib /usr/src/fixlib
COPY fixcore /usr/src/fixcore
COPY fixworker /usr/src/fixworker
COPY fixmetrics /usr/src/fixmetrics
COPY fixshell /usr/src/fixshell
COPY plugins /usr/src/plugins

WORKDIR /usr/src/fixcore
RUN python3 -m venv /build/jupyterlite-venv-python3
RUN . /build/jupyterlite-venv-python3/bin/activate && python -m pip install -r requirements-jupyterlite.txt
RUN . /build/jupyterlite-venv-python3/bin/activate && python -m jupyter lite build --config jupyter_lite_config.json

# Build binary wheels
WORKDIR /usr/src
RUN . /usr/local/fix-venv-python3/bin/activate && pip install -r requirements-extra.txt
RUN . /usr/local/fix-venv-python3/bin/activate && find plugins/ -maxdepth 1 -mindepth 1 -type d -print0 | xargs -0 python -m pip install ./fixlib ./fixcore ./fixworker ./fixmetrics ./fixshell

# Download and install ArangoDB tools
WORKDIR /tmp/arangodb
RUN if [ "${TARGETPLATFORM}" = "linux/amd64" ]; then \
        ARANGO_URL="https://download.arangodb.com/arangodb311/Community/Linux/arangodb3-client-linux-${ARANGO_VERSION}_x86_64.tar.gz"; \
    elif [ "${TARGETPLATFORM}" = "linux/arm64" ]; then \
        ARANGO_URL="https://download.arangodb.com/arangodb311/Community/Linux/arangodb3-client-linux-${ARANGO_VERSION}_arm64.tar.gz"; \
    else \
        echo "Building for unknown platform - not copying ArangoDB client binaries" && exit 0; \
    fi && \
    curl -L -o arangodb3-client.tar.gz "${ARANGO_URL}" && \
    tar -xzf arangodb3-client.tar.gz --strip-components=1 && \
    cp usr/bin/arangodump /usr/local/bin/arangodump && \
    cp usr/bin/arangorestore /usr/local/bin/arangorestore

# Copy image config and startup files
WORKDIR /usr/src/fixinventory
COPY dockerV2/defaults /usr/local/etc/fixinventory/defaults
COPY dockerV2/common /usr/local/etc/fixinventory/common
COPY dockerV2/bootstrap /usr/local/sbin/bootstrap
COPY dockerV2/postflight /usr/local/sbin/postflight
COPY dockerV2/fixsh-shim /usr/local/bin/fixsh-shim
COPY dockerV2/fixsh-wait /usr/local/bin/fixsh-wait
COPY dockerV2/fixcore-shim /usr/local/bin/fixcore-shim
COPY dockerV2/fixworker-shim /usr/local/bin/fixworker-shim
COPY dockerV2/fixmetrics-shim /usr/local/bin/fixmetrics-shim
RUN chmod 755 \
    /usr/local/sbin/bootstrap \
    /usr/local/sbin/postflight \
    /usr/local/bin/fixsh-shim \
    /usr/local/bin/fixcore-shim \
    /usr/local/bin/fixworker-shim \
    /usr/local/bin/fixmetrics-shim
RUN if [ "${TESTS:-false}" = true ]; then \
        shellcheck -a -x -s bash -e SC2034 \
            /usr/local/sbin/bootstrap \
        ; \
    fi
COPY dockerV2/dnsmasq.conf /usr/local/etc/dnsmasq.conf
RUN echo "${SOURCE_COMMIT:-unknown}" > /usr/local/etc/git-commit.HEAD


# Setup main image
FROM python:3.12.2-slim-bookworm
ENV DEBIAN_FRONTEND=noninteractive
ENV LANG="en_US.UTF-8"
ENV TERM="xterm-256color"
ENV COLORTERM="truecolor"
ENV EDITOR="vim"
ENV FIXSHELL_DOWNLOAD_DIRECTORY="/home/fixinventory/downloads"
COPY --from=build-env /usr/local /usr/local
ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
WORKDIR /
RUN groupadd -g "${PGID:-0}" -o fixinventory \
    && useradd -g "${PGID:-0}" -u "${PUID:-0}" -o --create-home fixinventory \
    && apt-get update \
    && apt-get -y --no-install-recommends install apt-utils \
    && apt-get -y dist-upgrade \
    && apt-get -y --no-install-recommends install \
        dumb-init \
        iproute2 \
        dnsmasq \
        libffi8 \
        openssl \
        procps \
        dateutils \
        curl \
        jq \
        cron \
        ca-certificates \
        openssh-client \
        locales \
        unzip \
        nano \
        nvi \
        vim \
        joe \
        awscli \
    && echo 'LANG="en_US.UTF-8"' > /etc/default/locale \
    && echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen \
    && mkdir -p /var/run/fixinventory /home/fixinventory/downloads \
    && rm -f /bin/sh \
    && ln -s /bin/bash /bin/sh \
    && locale-gen \
    && /usr/local/sbin/postflight \
    && ln -s /usr/local/bin/fixsh-shim /usr/bin/fixsh \
    && ln -s /usr/local/bin/fixcore-shim /usr/bin/fixcore \
    && ln -s /usr/local/bin/fixworker-shim /usr/bin/fixworker \
    && ln -s /usr/local/bin/fixmetrics-shim /usr/bin/fixmetrics \
    && ln -s /usr/local/bin/fixsh-shim /usr/bin/resh \
    && ln -s /usr/local/bin/fixcore-shim /usr/bin/resotocore \
    && ln -s /usr/local/bin/fixworker-shim /usr/bin/resotoworker \
    && ln -s /usr/local/bin/fixmetrics-shim /usr/bin/resotometrics \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

ENTRYPOINT ["/bin/dumb-init", "--", "/usr/local/sbin/bootstrap"]
CMD ["/bin/bash"]
