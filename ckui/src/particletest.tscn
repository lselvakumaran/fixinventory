[gd_scene load_steps=8 format=2]

[sub_resource type="Shader" id=10]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.stable's SpatialMaterial.

shader_type spatial;
render_mode blend_add,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,unshaded;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform int particles_anim_h_frames;
uniform int particles_anim_v_frames;
uniform bool particles_anim_loop;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform float fadeout_dist;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	mat4 mat_world = mat4(normalize(CAMERA_MATRIX[0])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[1])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[2])*length(WORLD_MATRIX[2]),WORLD_MATRIX[3]);
	mat_world = mat_world * mat4( vec4(cos(INSTANCE_CUSTOM.x),-sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0, 1.0));
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat_world;
	float h_frames = float(particles_anim_h_frames);
	float v_frames = float(particles_anim_v_frames);
	float particle_total_frames = float(particles_anim_h_frames * particles_anim_v_frames);
	float particle_frame = floor(INSTANCE_CUSTOM.z * float(particle_total_frames));
	if (!particles_anim_loop) {
		particle_frame = clamp(particle_frame, 0.0, particle_total_frames - 1.0);
	} else {
		particle_frame = mod(particle_frame, particle_total_frames);
	}	UV /= vec2(h_frames, v_frames);
	UV += vec2(mod(particle_frame, h_frames) / h_frames, floor((particle_frame + 0.5) / h_frames) / v_frames);
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	albedo_tex *= COLOR;
	
	vec3 ro = (CAMERA_MATRIX * vec4(0.0, 0.0, 0.0, 1.0)).xyz;// Get camera position in World space coordinates
	vec3 p = ((WORLD_MATRIX)*vec4(VERTEX,1.0)).xyz;// Get fragment position in world space coordinates
	float depth = abs( clamp( max( length(p-ro)-fadeout_dist, 0.0) / fadeout_dist, 0.0, 1.0) - 1.0 );
	
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	ALPHA = depth;
}
"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 10 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/particles_anim_h_frames = 1
shader_param/particles_anim_v_frames = 1
shader_param/particles_anim_loop = false
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/fadeout_dist = 300.0

[sub_resource type="Shader" id=11]
code = "shader_type particles;
uniform vec3 emission_box_extents;
uniform vec4 color_value : hint_color;
uniform float grid_amount;
uniform sampler2D color_ramp;


float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

void vertex() {
	uint base_number = NUMBER;
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	bool restart = false;
	float tv = 0.0;
	if (CUSTOM.y > CUSTOM.w) {
		restart = true;
		tv = 1.0;
	}

	if (RESTART || restart) {
		float x_grid = round((rand_from_seed(alt_seed) * 2.0 - 1.0) * grid_amount) / grid_amount;
		float y_grid = round((rand_from_seed(alt_seed) * 2.0 - 1.0) * grid_amount) / grid_amount;
		float z_grid = round((rand_from_seed(alt_seed) * 2.0 - 1.0) * grid_amount) / grid_amount;

		CUSTOM.w = (1.0 * rand_from_seed(alt_seed));
		TRANSFORM[3].xyz = vec3(rand_from_seed(alt_seed) * 2.0 - 1.0, rand_from_seed(alt_seed) * 2.0 - 1.0, rand_from_seed(alt_seed) * 2.0 - 1.0) * emission_box_extents;
		VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
		
		TRANSFORM[3].xyz = vec3(x_grid, y_grid, z_grid) * emission_box_extents;
		VELOCITY = vec3(0.0);
		//TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
	} else {
		CUSTOM.y += DELTA / LIFETIME;
		tv = CUSTOM.y / CUSTOM.w;
	}
	COLOR =  textureLod(color_ramp, vec2(tv, 0.0), 0.0) * color_value;
	if( TRANSFORM[3].x < EMISSION_TRANSFORM[3].x - emission_box_extents.x ) {
		TRANSFORM[3].x += 2.0 * emission_box_extents.x; }
	if( TRANSFORM[3].x > EMISSION_TRANSFORM[3].x + emission_box_extents.x ) {
		TRANSFORM[3].x -= 2.0 * emission_box_extents.x; }
	if( TRANSFORM[3].y > EMISSION_TRANSFORM[3].y + emission_box_extents.y ) {
		TRANSFORM[3].y -= 2.0 * emission_box_extents.y; }
	if( TRANSFORM[3].y < EMISSION_TRANSFORM[3].y +- emission_box_extents.y ) {
		TRANSFORM[3].y += 2.0 * emission_box_extents.y; }
	if( TRANSFORM[3].z > EMISSION_TRANSFORM[3].z + emission_box_extents.z ) {
		TRANSFORM[3].z -= 2.0 * emission_box_extents.z; }
	if( TRANSFORM[3].z < EMISSION_TRANSFORM[3].z +- emission_box_extents.z ) {
		TRANSFORM[3].z += 2.0 * emission_box_extents.z; }
		

	if (CUSTOM.y > CUSTOM.w) {		ACTIVE = false;
	}
}

"

[sub_resource type="Gradient" id=2]
offsets = PoolRealArray( 0, 0.420635, 0.996032 )
colors = PoolColorArray( 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0 )

[sub_resource type="GradientTexture" id=12]
gradient = SubResource( 2 )

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 11 )
shader_param/emission_box_extents = Vector3( 200, 200, 200 )
shader_param/color_value = Color( 1, 1, 1, 1 )
shader_param/grid_amount = 3.0
shader_param/color_ramp = SubResource( 12 )

[sub_resource type="QuadMesh" id=5]

[node name="Spatial" type="Spatial"]

[node name="Particles" type="Particles" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -8.65206, 15.2081, -14.7618 )
material_override = SubResource( 9 )
amount = 2000
lifetime = 8.0
visibility_aabb = AABB( -1, -1, -1, 2, 2, 2 )
local_coords = false
process_material = SubResource( 7 )
draw_pass_1 = SubResource( 5 )
