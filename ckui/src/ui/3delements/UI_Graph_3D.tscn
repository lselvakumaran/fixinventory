[gd_scene load_steps=11 format=2]

[ext_resource path="res://ui/3delements/scripts/ui_graph_3D.gd" type="Script" id=1]
[ext_resource path="res://ui/3delements/Element_GraphView_3D.tscn" type="PackedScene" id=2]

[sub_resource type="Curve" id=13]
_data = [ Vector2( 0, 0.581818 ), 0.0, 0.3, 0, 1, Vector2( 1, 0.881818 ), 0.3, 0.0, 1, 0 ]

[sub_resource type="Shader" id=8]
code = "
shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,unshaded,shadows_disabled,ambient_light_disabled;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform int particles_anim_h_frames;
uniform int particles_anim_v_frames;
uniform bool particles_anim_loop;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform float distance_fade_min;
uniform float distance_fade_max;

uniform float close_fade_min;
uniform float close_fade_max;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	mat4 mat_world = mat4(normalize(CAMERA_MATRIX[0])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[1])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[2])*length(WORLD_MATRIX[2]),WORLD_MATRIX[3]);
	mat_world = mat_world * mat4( vec4(cos(INSTANCE_CUSTOM.x),-sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0, 1.0));
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat_world;
	float h_frames = float(particles_anim_h_frames);
	float v_frames = float(particles_anim_v_frames);
	float particle_total_frames = float(particles_anim_h_frames * particles_anim_v_frames);
	float particle_frame = floor(INSTANCE_CUSTOM.z * float(particle_total_frames));
	if (!particles_anim_loop) {
		particle_frame = clamp(particle_frame, 0.0, particle_total_frames - 1.0);
	} else {
		particle_frame = mod(particle_frame, particle_total_frames);
	}	UV /= vec2(h_frames, v_frames);
	UV += vec2(mod(particle_frame, h_frames) / h_frames, floor((particle_frame + 0.5) / h_frames) / v_frames);
}


void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	albedo_tex *= COLOR;
	
	ALBEDO = albedo.rgb * albedo_tex.rgb * COLOR.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	ALPHA = albedo.a * albedo_tex.a * COLOR.a;
	ALPHA*=clamp(smoothstep(distance_fade_min,distance_fade_max,-VERTEX.z),0.0,1.0);
	ALPHA*=clamp(smoothstep(close_fade_min,close_fade_max,-VERTEX.z),0.0,1.0);
}
"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/albedo = Color( 0.364706, 0.643137, 1, 0.12549 )
shader_param/specular = 0.0
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/particles_anim_h_frames = 1
shader_param/particles_anim_v_frames = 1
shader_param/particles_anim_loop = false
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/distance_fade_min = 3000.0
shader_param/distance_fade_max = 1000.0
shader_param/close_fade_min = 400.0
shader_param/close_fade_max = 800.0

[sub_resource type="Shader" id=6]
code = "shader_type particles;
uniform vec3 emission_box_extents;
uniform vec4 color_value : hint_color;
uniform float grid_amount;
uniform sampler2D color_ramp;


float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

void vertex() {
	uint base_number = NUMBER;
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	bool restart = false;
	float tv = 0.0;
	if (CUSTOM.y > CUSTOM.w) {
		restart = true;
		tv = 1.0;
	}

	if (RESTART || restart) {
	//	float x_grid = round((rand_from_seed(alt_seed) * 2.0 - 1.0) * grid_amount) / grid_amount;
	//	float y_grid = round((rand_from_seed(alt_seed) * 2.0 - 1.0) * grid_amount) / grid_amount;
	//	float z_grid = round((rand_from_seed(alt_seed) * 2.0 - 1.0) * grid_amount) / grid_amount;
		
		float x_grid = (rand_from_seed(alt_seed) * 2.0 - 1.0);
		float y_grid = (rand_from_seed(alt_seed) * 2.0 - 1.0);
		float z_grid = (rand_from_seed(alt_seed) * 2.0 - 1.0);

		CUSTOM.w = (1.0 * rand_from_seed(alt_seed));
		TRANSFORM[3].xyz = vec3(x_grid, y_grid, z_grid) * emission_box_extents + vec3(emission_box_extents)/(grid_amount*2.0);
		VELOCITY = vec3(0.0);
		//TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
	} else {
		CUSTOM.y += DELTA / LIFETIME;
		tv = CUSTOM.y / CUSTOM.w;
	}
	COLOR =  textureLod(color_ramp, vec2(tv, 0.0), 0.0) * color_value;
	if( TRANSFORM[3].x < EMISSION_TRANSFORM[3].x - emission_box_extents.x ) {
		TRANSFORM[3].x += 2.0 * emission_box_extents.x; }
	if( TRANSFORM[3].x > EMISSION_TRANSFORM[3].x + emission_box_extents.x ) {
		TRANSFORM[3].x -= 2.0 * emission_box_extents.x; }
	if( TRANSFORM[3].y > EMISSION_TRANSFORM[3].y + emission_box_extents.y ) {
		TRANSFORM[3].y -= 2.0 * emission_box_extents.y; }
	if( TRANSFORM[3].y < EMISSION_TRANSFORM[3].y +- emission_box_extents.y ) {
		TRANSFORM[3].y += 2.0 * emission_box_extents.y; }
	if( TRANSFORM[3].z > EMISSION_TRANSFORM[3].z + emission_box_extents.z ) {
		TRANSFORM[3].z -= 2.0 * emission_box_extents.z; }
	if( TRANSFORM[3].z < EMISSION_TRANSFORM[3].z +- emission_box_extents.z ) {
		TRANSFORM[3].z += 2.0 * emission_box_extents.z; }
		

	if (CUSTOM.y > CUSTOM.w) {		ACTIVE = false;
	}
}

"

[sub_resource type="Gradient" id=10]
offsets = PoolRealArray( 0, 0.22467, 0.797357, 0.996032 )
colors = PoolColorArray( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 )

[sub_resource type="GradientTexture" id=3]
gradient = SubResource( 10 )

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 6 )
shader_param/emission_box_extents = Vector3( 4000, 4000, 4000 )
shader_param/color_value = Color( 1, 1, 1, 1 )
shader_param/grid_amount = 16.0
shader_param/color_ramp = SubResource( 3 )

[sub_resource type="QuadMesh" id=12]
size = Vector2( 4, 4 )

[node name="UIGraph3D" type="Spatial"]
script = ExtResource( 1 )
zoom_curve = SubResource( 13 )
main_ui = NodePath(".")

[node name="ParticleDots" type="Particles" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -5 )
material_override = SubResource( 9 )
amount = 10000
lifetime = 20.0
visibility_aabb = AABB( -800, -800, -800, 1600, 1600, 1600 )
local_coords = false
process_material = SubResource( 11 )
draw_pass_1 = SubResource( 12 )

[node name="CameraArm" type="Spatial" parent="."]

[node name="GraphCam3D" type="Camera" parent="CameraArm"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1000 )
current = true
fov = 30.0
near = 0.01
far = 50000.0

[node name="RemoteTransform" type="RemoteTransform" parent="CameraArm"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -5 )
remote_path = NodePath("../../ParticleDots")
update_rotation = false
update_scale = false

[node name="GraphView" parent="." instance=ExtResource( 2 )]

[node name="CamMoveTween" type="Tween" parent="."]

[node name="AnimTween" type="Tween" parent="."]

[node name="NewNodeSelectionTimer" type="Timer" parent="."]
wait_time = 0.05
one_shot = true

[connection signal="tween_all_completed" from="CamMoveTween" to="." method="_on_CamMoveTween_tween_all_completed"]
[connection signal="timeout" from="NewNodeSelectionTimer" to="." method="_on_NewNodeSelectionTimer_timeout"]
