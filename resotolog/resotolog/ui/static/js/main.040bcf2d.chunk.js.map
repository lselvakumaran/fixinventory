{"version":3,"sources":["App.js","index.js"],"names":["Styles","styled","div","_templateObject","Object","taggedTemplateLiteral","headerProps","props","_ref","column","getStyles","align","cellProps","_ref2","cell","style","justifyContent","arguments","length","undefined","alignItems","display","Table","_ref3","columns","data","defaultColumn","useMemo","minWidth","width","maxWidth","_useTable","useTable","useResizeColumns","useFlexLayout","useRowSelect","getTableProps","headerGroups","rows","prepareRow","react_default","a","createElement","assign","className","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canResize","getResizerProps","concat","isResizing","row","getRowProps","cells","getCellProps","App","as_time","Date","value","toLocaleTimeString","Header","accessor","Cell","_useState","useState","_useState2","slicedToArray","setData","loc","window","location","url","protocol","host","console","log","WebSocket","onmessage","event","message","JSON","parse","messages","toConsumableArray","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.040bcf2d.chunk.js","sourcesContent":["import React, {useState, useMemo} from 'react'\nimport styled from 'styled-components'\nimport {useTable, useResizeColumns, useFlexLayout, useRowSelect} from 'react-table'\n\n\nconst Styles = styled.div`\n  padding: 1rem;\n  ${'' /* These styles are suggested for the table fill all available space in its containing element */}\n  display: block;\n  ${'' /* These styles are required for a horizontaly scrollable table overflow */}\n  overflow: auto;\n\n  .table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    .thead {\n      ${'' /* These styles are required for a scrollable body to align with the header properly */}\n      overflow-y: auto;\n      overflow-x: hidden;\n    }\n\n    .tbody {\n      ${'' /* These styles are required for a scrollable table body */}\n      overflow-y: scroll;\n      overflow-x: hidden;\n      height: 100%;\n    }\n\n    .tr {\n      :last-child {\n        .td {\n          border-bottom: 0;\n        }\n      }\n      border-bottom: 1px solid black;\n    }\n\n    .th,\n    .td {\n      margin: 0;\n      padding: 0.5rem;\n      border-right: 1px solid black;\n\n      ${'' /* In this example we use an absolutely position resizer, so this is required. */}\n      position: relative;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      .resizer {\n        right: 0;\n        background: blue;\n        width: 10px;\n        height: 100%;\n        position: absolute;\n        top: 0;\n        z-index: 1;\n        ${'' /* prevents from scrolling while dragging on touch devices */}\n        touch-action :none;\n\n        &.isResizing {\n          background: red;\n        }\n      }\n    }\n  }\n`\n\nconst headerProps = (props, {column}) => getStyles(props, column.align)\n\nconst cellProps = (props, {cell}) => getStyles(props, cell.column.align)\n\nconst getStyles = (props, align = 'left') => [\n    props,\n    {\n        style: {\n            justifyContent: align === 'right' ? 'flex-end' : 'flex-start',\n            alignItems: 'flex-start',\n            display: 'flex',\n        },\n    },\n]\n\nfunction Table({columns, data}) {\n    const defaultColumn = useMemo(\n        () => ({\n            minWidth: 10, // minWidth is only used as a limit for resizing\n            width: 150, // width is used for both the flex-basis and flex-grow\n            maxWidth: 500, // maxWidth is only used as a limit for resizing\n        }),\n        []\n    )\n\n    const {getTableProps, headerGroups, rows, prepareRow} = useTable(\n        {\n            columns,\n            data,\n            defaultColumn,\n        },\n        useResizeColumns,\n        useFlexLayout,\n        useRowSelect\n    )\n\n    return (\n        <div {...getTableProps()} className=\"table\">\n            <div>\n                {headerGroups.map(headerGroup => (\n                    <div\n                        {...headerGroup.getHeaderGroupProps({\n                            // style: { paddingRight: '15px' },\n                        })}\n                        className=\"tr\"\n                    >\n                        {headerGroup.headers.map(column => (\n                            <div {...column.getHeaderProps(headerProps)} className=\"th\">\n                                {column.render('Header')}\n                                {/* Use column.getResizerProps to hook up the events correctly */}\n                                {column.canResize && (\n                                    <div\n                                        {...column.getResizerProps()}\n                                        className={`resizer ${\n                                            column.isResizing ? 'isResizing' : ''\n                                        }`}\n                                    />\n                                )}\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </div>\n            <div className=\"tbody\">\n                {rows.map(row => {\n                    prepareRow(row)\n                    return (\n                        <div {...row.getRowProps()} className=\"tr\">\n                            {row.cells.map(cell => {\n                                return (\n                                    <div {...cell.getCellProps(cellProps)} className=\"td\">\n                                        {cell.render('Cell')}\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nfunction App() {\n    function as_time(cell) {\n        return <span>{new Date(cell.value * 1000).toLocaleTimeString()}</span>\n    }\n\n    // define the columns to show\n    const columns = useMemo(\n        () => [\n            {Header: 'When', width: 10, accessor: 'epoch', Cell: as_time},\n            {Header: 'Who', width: 15, accessor: 'origin'},\n            {Header: 'Severity', width: 10, accessor: 'severity'},\n            {Header: 'Message', width: 120, accessor: 'payload.message'},\n        ],\n        []\n    )\n\n    // define state and update function\n    const [data, setData] = useState([]);\n\n    useMemo(() => {\n        let loc = window.location;\n        const scheme = loc.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n        const url = scheme+\"//\" + loc.host + \"/events\"\n        console.log(\"Connect websocket to \" + url)\n        const ws = new WebSocket(url)\n        ws.onmessage = (event) => {\n            const message = JSON.parse(event.data)\n            console.log(\"GOT message\", message)\n            setData(messages => [message, ...messages])\n        }\n    }, [])\n\n    return (\n        <Styles>\n            <Table columns={columns} data={data}/>\n        </Styles>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}