#!/bin/bash
# Bootstraps runit config
set -euo pipefail

# Include defaults
. /usr/local/etc/cloudkeeper/defaults
. /usr/local/etc/cloudkeeper/common
. /usr/local/cloudkeeper-venv-python3/bin/activate


main() {
    apply_permissions
    configure_timezone
    setup_etc_hosts || true
    setup_dnsmasq
    setup_graphdb
    setup_tsdb
    setup_ckcore "$@"
    setup_ckworker "$@"
    setup_ckmetrics "$@"
    setup_runit
    exec /sbin/my_init
}


# Apply user id and group id
apply_permissions() {
    info "Setting uid:gid of cloudkeeper to $PUID:$PGID"
    groupmod -g "${PGID}" -o cloudkeeper
    #usermod -u "${PUID}" -o -g cloudkeeper cloudkeeper
    sed -i -E "s/^(cloudkeeper:x):[0-9]+:[0-9]+:(.*)/\\1:$PUID:$PGID:\\2/" /etc/passwd

    mkdir -p \
        "$TSDB_DATABASE_DIRECTORY" \
        "$GRAPHDB_DATABASE_DIRECTORY"

    chown -R cloudkeeper:cloudkeeper \
        /home/cloudkeeper \
        "$TSDB_DATABASE_DIRECTORY" \
        "$GRAPHDB_DATABASE_DIRECTORY"
}


# Configure timezone
configure_timezone() {
    export TZ
    if [ ! -f "/usr/share/zoneinfo/$TZ" ]; then
        warn "Unknown timezone $TZ - defaulting to Etc/UTC"
        TZ="Etc/UTC"
    fi
    ln -snf "/usr/share/zoneinfo/$TZ" /etc/localtime
    echo "$TZ" > /etc/timezone
    info "Setting timezone $TZ"
}


# Enable/disable IP protocols in /etc/hosts
setup_etc_hosts() {
    local temp_hosts
    temp_hosts="$(mktemp)"
    cat /etc/hosts > "$temp_hosts"

    if ipv4_enabled; then
        sed -i -E "s/^#(127\.0\.0\.1.*)/\1/" "$temp_hosts"
    else
        sed -i -E "s/^(127\.0\.0\.1.*)/#\1/" "$temp_hosts"
    fi

    if ipv6_enabled; then
        sed -i -E "s/^#(::1.*)/\1/" "$temp_hosts"
    else
        sed -i -E "s/^(::1.*)/#\1/" "$temp_hosts"
    fi

    # /etc/hosts is singularly mounted into the container.
    # sed -i is not really working in-place but instead
    # creates a temp file and then moves it. So would fail
    # on /etc/hosts. Instead of atomically moving
    # we cat the temp file into the destination.
    cat "$temp_hosts" > /etc/hosts
    rm -f "$temp_hosts"
}

setup_runit() {
    chmod +x /etc/service/*/run
}

setup_dnsmasq() {
    rm -f "$runit_dnsmasq_rundir/run"
    if [ "$START_DNSMASQ" = true ]; then
        info "dnsmasq activated"
        mkdir -p "$runit_dnsmasq_rundir"
        cp "$runit_dnsmasq_conf_in" "$runit_dnsmasq_rundir/run"
        cp /etc/resolv.conf /etc/resolv.dnsmasq
        if [ "${LOG_DNS_QUERIES-}" = true ]; then
            echo "log-queries=extra" >> /etc/dnsmasq.d/cloudkeeper.conf
        fi
        echo "nameserver 127.0.0.1" > /etc/resolv.conf
    fi
}

setup_graphdb() {
    rm -f "$runit_graphdb_rundir/run"
    rm -f "$runit_graphdb_bootstrap_rundir/run"
    if [ "$START_GRAPHDB" = true ]; then
        info "Graph database activated"
        mkdir -p "$runit_graphdb_rundir"
        mkdir -p "$runit_graphdb_bootstrap_rundir"
        sed -e "s#@GRAPHDB_SERVER_ENDPOINT@#$GRAPHDB_SERVER_ENDPOINT#" \
            -e "s#@GRAPHDB_ROOT_PASSWORD@#$GRAPHDB_ROOT_PASSWORD#" \
            -e "s#@GRAPHDB_DATABASE_DIRECTORY@#$GRAPHDB_DATABASE_DIRECTORY#" \
            "$runit_graphdb_conf_in" > "$runit_graphdb_rundir/run"
        cp "$runit_graphdb_bootstrap_conf_in" "$runit_graphdb_bootstrap_rundir/run"
    fi
}

setup_tsdb() {
    rm -f "$runit_tsdb_rundir/run"
    if [ "$START_TSDB" = true ]; then
        info "Time series database activated"
        mkdir -p "$runit_tsdb_rundir"
        sed -e "s#@TSDB_DATABASE_DIRECTORY@#$TSDB_DATABASE_DIRECTORY#" \
            -e "s#@TSDB_CONFIG_FILE@#$TSDB_CONFIG_FILE#" \
            -e "s#@TSDB_RETENTION_TIME@#$TSDB_RETENTION_TIME#" \
            "$runit_tsdb_conf_in" > "$runit_tsdb_rundir/run"
    fi
}

setup_ckcore() {
    rm -f "$runit_ckcore_rundir/run"
    if [ "$START_CKCORE" = true ]; then
        info "ckcore activated"
        mkdir -p "$runit_ckcore_rundir"
        argsdispatcher ckcore "$runit_ckcore_conf_in" "$@" > "$runit_ckcore_rundir/run"
        export CKCORE_GRAPHDB_SERVER
        export CKCORE_GRAPHDB_DATABASE
        export CKCORE_GRAPHDB_USERNAME
        export CKCORE_GRAPHDB_PASSWORD
        export CKCORE_PSK
        export CKCORE_HOST
    fi
}

setup_ckworker() {
    rm -f "$runit_ckworker_rundir/run"
    if [ "$START_CKWORKER" = true ]; then
        info "ckworker activated"
        mkdir -p "$runit_ckworker_rundir"
        argsdispatcher ckworker "$runit_ckworker_conf_in" "$@" > "$runit_ckworker_rundir/run"
        export CKWORKER_CKCORE_URI
        export CKWORKER_CKCORE_WS_URI
        export CKWORKER_PSK
    fi
}

setup_ckmetrics() {
    rm -f "$runit_ckmetrics_rundir/run"
    if [ "$START_CKMETRICS" = true ]; then
        info "ckmetrics activated"
        mkdir -p "$runit_ckmetrics_rundir"
        argsdispatcher ckmetrics "$runit_ckmetrics_conf_in" "$@" > "$runit_ckmetrics_rundir/run"
        export CKMETRICS_CKCORE_URI
        export CKMETRICS_CKCORE_WS_URI
        export CKMETRICS_PSK
    fi
}

main "$@"
