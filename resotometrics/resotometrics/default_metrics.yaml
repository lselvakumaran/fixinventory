access_keys_total:
  help: Number of Access Keys
  labels:
  - cloud
  - account
  - region
  - status
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region, access_key_status as status:
    sum(1) as access_keys_total): is(access_key)'
  type: gauge
accounts_total:
  help: Number of Accounts
  labels:
  - cloud
  query: 'aggregate(/ancestors.cloud.reported.name as cloud: sum(1) as accounts_total):
    is(account)'
  type: gauge
autoscaling_groups_total:
  help: Number of Autoscaling Groups
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as autoscaling_groups_total):
    is(autoscaling_group)'
  type: gauge
buckets_quotas_total:
  help: Quotas of Storage Buckets
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as buckets_quotas_total):
    is(bucket_quota)'
  type: gauge
buckets_total:
  help: Number of Storage Buckets
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as buckets_total):
    is(bucket)'
  type: gauge
certificates_quotas_total:
  help: Quotas of Certificates
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as certificates_quotas_total):
    is(certificate_quota)'
  type: gauge
certificates_total:
  help: Number of Certificates
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as certificates_total):
    is(certificate)'
  type: gauge
cleaned_access_keys_total:
  help: Cleaned number of Access Keys
  labels:
  - cloud
  - account
  - region
  - status
cleaned_autoscaling_groups_total:
  help: Cleaned number of Autoscaling Groups
  labels:
  - cloud
  - account
  - region
cleaned_buckets_total:
  help: Cleaned number of Storage Buckets
  labels:
  - cloud
  - account
  - region
cleaned_certificates_total:
  help: Cleaned number of Certificates
  labels:
  - cloud
  - account
  - region
cleaned_cores_total:
  help: Cleaned number of CPU cores
  labels:
  - cloud
  - account
  - region
  - type
cleaned_databases_bytes:
  help: Cleaned size of Databases in bytes
  labels:
  - cloud
  - account
  - region
  - type
  - instance_type
cleaned_databases_total:
  help: Cleaned number of Databases
  labels:
  - cloud
  - account
  - region
  - type
  - instance_type
cleaned_endpoints_total:
  help: Cleaned number of Endpoints
  labels:
  - cloud
  - account
  - region
cleaned_gateways_total:
  help: Cleaned number of Gateways
  labels:
  - cloud
  - account
  - region
cleaned_groups_total:
  help: Cleaned number of Groups
  labels:
  - cloud
  - account
  - region
cleaned_health_checks_total:
  help: Cleaned number of Health Checks
  labels:
  - cloud
  - account
  - region
cleaned_instance_profiles_total:
  help: Cleaned number of Instance Profiles
  labels:
  - cloud
  - account
  - region
cleaned_instances_hourly_cost_estimate:
  help: Cleaned hourly instance cost estimate
  labels:
  - cloud
  - account
  - region
  - type
cleaned_instances_total:
  help: Cleaned number of Instances
  labels:
  - cloud
  - account
  - region
  - type
  - status
cleaned_ip_addresses_total:
  help: Cleaned number of IP Addresses
  labels:
  - cloud
  - account
  - region
cleaned_keypairs_total:
  help: Cleaned number of Key Pairs
  labels:
  - cloud
  - account
  - region
cleaned_load_balancers_total:
  help: Cleaned number of Load Balancers
  labels:
  - cloud
  - account
  - region
  - type
cleaned_memory_bytes:
  help: Cleaned amount of RAM in bytes
  labels:
  - cloud
  - account
  - region
  - type
cleaned_network_acls_total:
  help: Cleaned number of Network ACLs
  labels:
  - cloud
  - account
  - region
cleaned_network_interfaces_total:
  help: Cleaned number of Network Interfaces
  labels:
  - cloud
  - account
  - region
  - status
cleaned_networks_total:
  help: Cleaned number of Networks
  labels:
  - cloud
  - account
  - region
cleaned_peering_connections_total:
  help: Cleaned number of Peering Connections
  labels:
  - cloud
  - account
  - region
cleaned_policies_total:
  help: Cleaned number of Policies
  labels:
  - cloud
  - account
  - region
cleaned_roles_total:
  help: Cleaned number of Roles
  labels:
  - cloud
  - account
  - region
cleaned_routing_tables_total:
  help: Cleaned number of Routing Tables
  labels:
  - cloud
  - account
  - region
cleaned_security_groups_total:
  help: Cleaned number of Security Groups
  labels:
  - cloud
  - account
  - region
cleaned_snapshots_total:
  help: Cleaned number of Snapshots
  labels:
  - cloud
  - account
  - region
  - status
cleaned_snapshots_volumes_bytes:
  help: Cleaned size of Snapshots Volumes in bytes
  labels:
  - cloud
  - account
  - region
  - status
cleaned_stacks_total:
  help: Cleaned number of Stacks
  labels:
  - cloud
  - account
  - region
cleaned_subnets_total:
  help: Cleaned number of Subnets
  labels:
  - cloud
  - account
  - region
cleaned_tunnels_total:
  help: Cleaned number of Tunnels
  labels:
  - cloud
  - account
  - region
cleaned_users_total:
  help: Cleaned number of Users
  labels:
  - cloud
  - account
  - region
cleaned_volume_bytes:
  help: Cleaned size of Volumes in bytes
  labels:
  - cloud
  - account
  - region
  - type
  - status
cleaned_volumes_monthly_cost_estimate:
  help: Cleaned monthly volume cost estimate
  labels:
  - cloud
  - account
  - region
  - type
  - status
cleaned_volumes_total:
  help: Cleaned number of Volumes
  labels:
  - cloud
  - account
  - region
  - type
  - status
cores_total:
  help: Number of CPU cores
  labels:
  - cloud
  - account
  - region
  - type
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region, instance_type as type:
    sum(instance_cores) as cores_total): is(instance) and instance_status == running'
  type: gauge
databases_bytes:
  help: Size of Databases in bytes
  labels:
  - cloud
  - account
  - region
  - type
  - instance_type
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region, db_type as type, instance_type
    as instance_type: sum(volume_size * 1024 * 1024 * 1024) as databases_bytes): is(database)'
  type: gauge
databases_total:
  help: Number of Databases
  labels:
  - cloud
  - account
  - region
  - type
  - instance_type
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region, db_type as type, instance_type
    as instance_type: sum(1) as databases_total): is(database)'
  type: gauge
endpoints_total:
  help: Number of Endpoints
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as endpoints_total):
    is(endpoint)'
  type: gauge
gateways_quotas_total:
  help: Quotas of Gateways
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as gateways_quotas_total):
    is(gateway_quota)'
  type: gauge
gateways_total:
  help: Number of Gateways
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as gateways_total):
    is(gateway)'
  type: gauge
groups_total:
  help: Number of Groups
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as groups_total):
    is(group)'
  type: gauge
health_checks_total:
  help: Number of Health Checks
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as health_checks_total):
    is(health_check)'
  type: gauge
instance_profiles_total:
  help: Number of Instance Profiles
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as instance_profiles_total):
    is(instance_profile)'
  type: gauge
instances_hourly_cost_estimate:
  help: Hourly instance cost estimate
  labels:
  - cloud
  - account
  - region
  - type
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region, instance_type as type:
    sum(/ancestors.instance_type.reported.ondemand_cost) as instances_hourly_cost_estimate):
    is(instance) and instance_status == running'
  type: gauge
instances_quotas_total:
  help: Quotas of Instances
  labels:
  - cloud
  - account
  - region
  - type
  - quota_type
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region, instance_type as type,
    quota_type as quota_type: sum(quota) as instances_quotas_total): is(instance_quota)
    and quota >= 0'
  type: gauge
instances_total:
  help: Number of Instances
  labels:
  - cloud
  - account
  - region
  - type
  - status
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region, instance_type as type,
    instance_status as status: sum(1) as instances_total): is(instance)'
  type: gauge
ip_addresses_total:
  help: Number of IP Addresses
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as ip_addresses_total):
    is(ip_address)'
  type: gauge
keypairs_total:
  help: Number of Key Pairs
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as keypairs_total):
    is(keypair)'
  type: gauge
load_balancers_quotas_total:
  help: Quotas of Load Balancers
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as load_balancers_quotas_total):
    is(load_balancer_quota)'
  type: gauge
load_balancers_total:
  help: Number of Load Balancers
  labels:
  - cloud
  - account
  - region
  - type
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region, lb_type as type: sum(1)
    as load_balancers_total): is(load_balancer)'
  type: gauge
memory_bytes:
  help: Amount of RAM in bytes
  labels:
  - cloud
  - account
  - region
  - type
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region, instance_type as type:
    sum(instance_memory * 1024 * 1024 * 1024) as memory_bytes): is(instance) and instance_status
    == running'
  type: gauge
network_acls_total:
  help: Number of Network ACLs
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as network_acls_total):
    is(network_acl)'
  type: gauge
network_interfaces_total:
  help: Number of Network Interfaces
  labels:
  - cloud
  - account
  - region
  - status
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region, network_interface_status
    as status: sum(1) as network_interfaces_total): is(network_interface)'
  type: gauge
networks_quotas_total:
  help: Quotas of Networks
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as networks_quotas_total):
    is(network_quota)'
  type: gauge
networks_total:
  help: Number of Networks
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as networks_total):
    is(network)'
  type: gauge
peering_connections_total:
  help: Number of Peering Connections
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as peering_connections_total):
    is(peering_connection)'
  type: gauge
policies_total:
  help: Number of Policies
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as policies_total):
    is(policy)'
  type: gauge
reserved_instances_total:
  help: Number of Reserved Instances
  labels:
  - cloud
  - account
  - region
  - type
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region, instance_type as type,
    quota_type as quota_type: sum(reservations) as reserved_instances_total): is(instance_type)
    and reservations >= 0'
  type: gauge
roles_total:
  help: Number of Roles
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as roles_total):
    is(role)'
  type: gauge
routing_tables_total:
  help: Number of Routing Tables
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as routing_tables_total):
    is(routing_table)'
  type: gauge
security_groups_total:
  help: Number of Security Groups
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as security_groups_total):
    is(security_group)'
  type: gauge
snapshots_total:
  help: Number of Snapshots
  labels:
  - cloud
  - account
  - region
  - status
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region, snapshot_status as status:
    sum(1) as snapshots_total): is(snapshot)'
  type: gauge
snapshots_volumes_bytes:
  help: Size of Snapshots Volumes in bytes
  labels:
  - cloud
  - account
  - region
  - status
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region, snapshot_status as status:
    sum(volume_size * 1024 * 1024 * 1024) as snapshots_volumes_bytes): is(snapshot)'
  type: gauge
stacks_total:
  help: Number of Stacks
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as stacks_total):
    is(stack)'
  type: gauge
subnets_total:
  help: Number of Subnets
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as subnets_total):
    is(subnet)'
  type: gauge
tunnels_total:
  help: Number of Tunnels
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as tunnels_total):
    is(tunnel)'
  type: gauge
users_total:
  help: Number of Users
  labels:
  - cloud
  - account
  - region
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region: sum(1) as users_total):
    is(user)'
  type: gauge
volume_bytes:
  help: Size of Volumes in bytes
  labels:
  - cloud
  - account
  - region
  - type
  - status
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region, volume_type as type, volume_status
    as status: sum(volume_size * 1024 * 1024 * 1024) as volume_bytes): is(volume)'
  type: gauge
volumes_monthly_cost_estimate:
  help: Monthly volume cost estimate
  labels:
  - cloud
  - account
  - region
  - type
  - status
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region, volume_type as type, volume_status
    as status: sum(/ancestors.volume_type.reported.ondemand_cost) as volumes_monthly_cost_estimate):
    is(volume)'
  type: gauge
volumes_quotas_bytes:
  help: Quotas of Volumes in bytes
  labels:
  - cloud
  - account
  - region
  - type
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region, volume_type as type: sum(quota
    * 1024 * 1024 * 1024 * 1024) as volumes_quotas_bytes): is(volume_type) and quota
    >= 0'
  type: gauge
volumes_total:
  help: Number of Volumes
  labels:
  - cloud
  - account
  - region
  - type
  - status
  query: 'aggregate(/ancestors.cloud.reported.name as cloud, /ancestors.account.reported.name
    as account, /ancestors.region.reported.name as region, volume_type as type, volume_status
    as status: sum(1) as volumes_total): is(volume)'
  type: gauge
