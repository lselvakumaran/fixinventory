openapi: 3.0.0
servers:
    - url: ../
      description: current system
info:
    description: API provided by keeper-core
    version: V1
    title: keeper-core REST API
tags:
    - name: model
      description: Endpoints to maintain the schema and model of the entities inside a graph.
    - name: graph
      description: Create wipe or delete a complete graph.
    - name: graph_reported
      description: Endpoints to manipulate the reported data in the graph.
    - name: graph_desired
      description: Endpoints to manipulate the desired data in the graph.
    - name: graph_all
      description: Endpoints to query all sections of the graph
    - name: cli
      description: Endpoints to evaluate and execute cli commands
    - name: subscriptions
      description: Endpoints to manipulate event subscriptions
    - name: work_queue
      description: Endpoints to attach to the work queue
    - name: system
      description: Endpoints to get information about the system.
    - name: debug
      description: Endpoints to debug the system

paths:

    # region model
    /model:
        get:
            summary: "Get the currently defined model."
            tags:
                - model
            responses:
                "200":
                    description: "The list of all kinds."
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Kind"
        patch:
            summary: "Add or update the current defined model."
            tags:
                - model
            requestBody:
                description: "Complete model or part of the model."
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Kind"
            responses:
                "200":
                    description: "OK if the model is updated successfully"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Kind"
                "400":
                    description: "Message that explains the error"
                    content:
                        text/plain:
                            schema:
                                type: string
    /model/uml:
        get:
            summary: "Get the currently defined model as svg uml image."
            tags:
                - model
            responses:
                "200":
                    description: "Returns the model as uml diagram in svg format"
    # endregion

    # region graph management
    /graph:
        get:
            summary: "List all graphs"
            tags:
                - graph
            responses:
                "200":
                    description: "The names of all graphs"
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: string
                                example: [ "main", "test" ]
    /graph/{graph_id}:
        get:
            summary: "Get root of a specific graph"
            tags:
                - graph
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: "The graph with the root node"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Node"
                "404":
                    description: "The graph does not exist"
        post:
            summary: "Create a new graph"
            tags:
                - graph
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: "The created graph with the root node"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Node"
        delete:
            summary: "Delete an existing graph"
            tags:
                - graph
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
                - name: truncate
                  in: query
                  schema:
                      type: boolean
                  description: "If this parameter is set, leave the graph definition, but wipe the data."
            responses:
                "200":
                    description: "Ok when the delete operation was successful"
                    content:
                        text/plain:
                            example: "Graph deleted."
    # endregion

    # region graph no section
    /graph/{graph_id}/query:
        post:
            summary: "Query this graph"
            description: |
                Query the graph by all sections. This means that properties have to be prefixed by the section name.
                Example: reported.age>23 and desired.clean==true and metadata.version==2
            tags:
                - graph_all
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
                - name: format
                  in: header
                  description: "The format of the result to return"
                  required: true
                  schema:
                      type: string
                      enum:
                          - graph
                          - list
                          - cytoscape
            requestBody:
                description: "The query to perform"
                content:
                    text/plain:
                        schema:
                            type: string
                            example: isinstance("graph_root") and reported.name=="root" -[0:1]->
            responses:
                "200":
                    description: "The result of this query in the defined format"
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - $ref: "#/components/schemas/Graph"
                                    - type: array
                                      items:
                                          $ref: "#/components/schemas/Node"
                        application/x-ndjson:
                            schema:
                                oneOf:
                                    - $ref: "#/components/schemas/NodeInGraph"
                                    - $ref: "#/components/schemas/Edge"
    /graph/{graph_id}/query/raw:
        post:
            summary: "Transform the query into the raw database query"
            description: |
                Query the graph by all sections. This means that properties have to be prefixed by the section name.
                Example: reported.age>23 and desired.clean==true and metadata.version==2
            tags:
                - debug
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The query to perform"
                content:
                    text/plain:
                        schema:
                            type: string
                            example: isinstance("graph_root") and reported.name=="root" -[0:1]->
            responses:
                "200":
                    description: "Returns the query as performed by the database."
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/RawQuery"
    /graph/{graph_id}/query/list:
        post:
            summary: "Query the graph and return all nodes as list (this will not contain any edges)"
            description: |
                Query the graph by all sections. This means that properties have to be prefixed by the section name.
                Example: reported.age>23 and desired.clean==true and metadata.version==2
            tags:
                - graph_all
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The query to perform"
                content:
                    text/plain:
                        schema:
                            type: string
                            example: isinstance("graph_root") and reported.name=="root" -[0:1]->
            responses:
                "200":
                    description: "The result of this query in the defined format"
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Node"
                        application/x-ndjson:
                            schema:
                                $ref: "#/components/schemas/Node"
    /graph/{graph_id}/query/graph:
        post:
            summary: "Query the graph and return the resulting graph."
            description: |
                Query the graph by all sections. This means that properties have to be prefixed by the section name.
                Example: reported.age>23 and desired.clean==true and metadata.version==2
            tags:
                - graph_all
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The query to perform"
                content:
                    text/plain:
                        schema:
                            type: string
                            example: isinstance("graph_root") and reported.name=="root" -[0:1]->
            responses:
                "200":
                    description: "The result of this query in the defined format"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Graph"
                        application/x-ndjson:
                            schema:
                                oneOf:
                                    - $ref: "#/components/schemas/NodeInGraph"
                                    - $ref: "#/components/schemas/Edge"
    /graph/{graph_id}/query/aggregate:
        post:
            summary: "Query the aggregate function on the specified graph and return the aggregation result."
            description: |
                Query the graph by all sections. This means that properties have to be prefixed by the section name.
                Example: reported.age>23 and desired.clean==true and metadata.version==2
            tags:
                - graph_all
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The aggregation query to perform"
                content:
                    text/plain:
                        schema:
                            type: string
                            example: |
                                aggregate(kind: count(id) as nodes): isinstance("node")
            responses:
                "200":
                    description: "The result of this query in the defined format"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Aggregated"
                        application/x-ndjson:
                            schema:
                                $ref: "#/components/schemas/Aggregated"
    /graph/{graph_id}/query/explain:
        post:
            summary: "Explain the query execution plan"
            description: |
                Query the graph by all sections. This means that properties have to be prefixed by the section name.
                Example: reported.age>23 and desired.clean==true and metadata.version==2

            tags:
                - debug
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The query to perform"
                content:
                    text/plain:
                        schema:
                            type: string
                            example: isinstance("graph_root") and reported.name=="root" -[0:1]->
            responses:
                "200":
                    description: "The execution plan of the database"
                    content:
                        application/json:
                            schema:
                                type: object
                                additionalProperties: true
    # endregion

    # region graph reported
    /graph/{graph_id}/reported/search:
        get:
            summary: "Search the graph"
            tags:
                - graph_reported
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
                - name: term
                  in: query
                  description: "The term to search for"
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: "All matching documents"
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Node"
                        application/x-ndjson:
                            schema:
                                $ref: "#/components/schemas/Node"
    /graph/{graph_id}/reported/node/{node_id}/under/{parent_node_id}:
        post:
            summary: "Create a new node under the given parent node"
            tags:
                - graph_reported
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
                - name: node_id
                  in: path
                  description: "The identifier of the node"
                  required: true
                  schema:
                      type: string
                - name: parent_node_id
                  in: path
                  description: "The identifier of the parent node"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The node document to create."
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Node"
            responses:
                "200":
                    description: "Return the created node"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Node"
    /graph/{graph_id}/reported/node/{node_id}:
        get:
            summary: "Get a node with the given node id"
            tags:
                - graph_reported
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
                - name: node_id
                  in: path
                  description: "The identifier of the node"
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: "Return the defined node"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Node"
        patch:
            summary: "Update a node with the given node id"
            tags:
                - graph_reported
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
                - name: node_id
                  in: path
                  description: "The identifier of the node"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The partial object data to patch."
                content:
                    application/json:
                        schema:
                            type: object
                            additionalProperties: true
            responses:
                "200":
                    description: "Return the patched node"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Node"
        delete:
            summary: "Delete a node with the given node id."
            tags:
                - graph_reported
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
                - name: node_id
                  in: path
                  description: "The identifier of the node"
                  required: true
                  schema:
                      type: string
            responses:
                "204":
                    description: "Node is deleted"
    /graph/{graph_id}/reported/merge:
        post:
            summary: "Merge a given graph with the existing graph under marked merge nodes."
            tags:
                - graph_reported
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            requestBody:
                description:
                    "The graph is sent as newline delimited json, where each line holds a document, which is either a node or an edge."
                required: true
                content:
                    application/x-ndjson:
                        schema:
                            oneOf:
                                - $ref: "#/components/schemas/NodeInGraph"
                                - $ref: "#/components/schemas/Edge"
                        example:
                          # TODO: is there a way to show ndjson instead of json?
                          [
                              { "id": "a", "data": { "kind": "loadbalancer", "ip": "1.2.3.4", "mathod": "roundrobin" } },
                              { "id": "b", "data": { "kind": "compute_instance", "machine_type": "gt-5", "cores": 24 } },
                              { "from": "a", "to": "b" },
                              { "id": "c", "data": { "kind": "compute_instance", "machine_type": "gt-5", "cores": 24 } },
                              { "from": "a", "to": "c" }
                          ]
            responses:
                "200":
                    description: "Return a summary of actions that has been applied."
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GraphUpdate"
    /graph/{graph_id}/reported/batch/merge:
        post:
            summary: "Merge a given graph with the existing graph under marked merge nodes as batch update."
            tags:
                - graph_reported
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
                - name: batch_id
                  in: query
                  description: >
                      A batch identifier is a string that uniquely identifies the batch update.
                      If this parameter is omitted, a new batch identifier is created automatically.
                      The resulting batch identifier can be retrieved via the response message.
                  required: false
                  schema:
                      default: null
                      type: string
            requestBody:
                description:
                    "The graph is sent as newline delimited json, where each line holds a document, which is either a node or an edge."
                required: true
                content:
                    application/x-ndjson:
                        schema:
                            oneOf:
                                - $ref: "#/components/schemas/NodeInGraph"
                                - $ref: "#/components/schemas/Edge"
                        example:
                          # TODO: is there a way to show ndjson instead of json?
                          [
                              { "id": "a", "data": { "kind": "loadbalancer", "ip": "1.2.3.4", "mathod": "roundrobin" } },
                              { "id": "b", "data": { "kind": "compute_instance", "machine_type": "gt-5", "cores": 24 } },
                              { "from": "a", "to": "b" },
                              { "id": "c", "data": { "kind": "compute_instance", "machine_type": "gt-5", "cores": 24 } },
                              { "from": "a", "to": "c" }
                          ]
            responses:
                "200":
                    description: "Return a summary of actions that has been applied."
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GraphUpdate"
    /graph/{graph_id}/reported/batch:
        get:
            summary: "Get a list of all running batch updates"
            tags:
                - graph_reported
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: "Ok message"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BatchUpdate"
    /graph/{graph_id}/reported/batch/{batch_id}:
        post:
            summary: "Commit a batch update"
            tags:
                - graph_reported
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
                - name: batch_id
                  in: path
                  description: "A batch identifier is a string that uniquely identifies the batch update."
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: "Ok message"
                    content:
                        application/json:
                            schema:
                                type: string
                                example: "Batch committed."
        delete:
            summary: "Abort a batch update"
            tags:
                - graph_reported
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
                - name: batch_id
                  in: path
                  description: "A batch identifier is a string that uniquely identifies the batch update."
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: "Ok message"
                    content:
                        application/json:
                            schema:
                                type: string
                                example: "Batch aborted."
    /graph/{graph_id}/reported/query:
        post:
            summary: "Query this graph"
            tags:
                - graph_reported
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
                - name: format
                  in: header
                  description: "The format of the result to return"
                  required: true
                  schema:
                      type: string
                      enum:
                          - graph
                          - list
                          - cytoscape
            requestBody:
                description: "The query to perform"
                content:
                    text/plain:
                        schema:
                            type: string
                            example: isinstance("graph_root") and name=="root" -[0:1]->
            responses:
                "200":
                    description: "The result of this query in the defined format"
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - $ref: "#/components/schemas/Graph"
                                    - type: array
                                      items:
                                          $ref: "#/components/schemas/Node"
                        application/x-ndjson:
                            schema:
                                oneOf:
                                    - $ref: "#/components/schemas/NodeInGraph"
                                    - $ref: "#/components/schemas/Edge"
    /graph/{graph_id}/reported/query/raw:
        post:
            summary: "Transform the query into the raw database query"
            tags:
                - debug
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The query to perform"
                content:
                    text/plain:
                        schema:
                            type: string
                            example: isinstance("graph_root") and name=="root" -[0:1]->
            responses:
                "200":
                    description: "Returns the query as performed by the database."
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/RawQuery"
    /graph/{graph_id}/reported/query/list:
        post:
            summary: "Query the graph and return all nodes as list (this will not contain any edges)"
            tags:
                - graph_reported
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The query to perform"
                content:
                    text/plain:
                        schema:
                            type: string
                            example: isinstance("graph_root") and name=="root" -[0:1]->
            responses:
                "200":
                    description: "The result of this query in the defined format"
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Node"
                        application/x-ndjson:
                            schema:
                                $ref: "#/components/schemas/Node"
    /graph/{graph_id}/reported/query/graph:
        post:
            summary: "Query the graph and return the resulting graph."
            tags:
                - graph_reported
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The query to perform"
                content:
                    text/plain:
                        schema:
                            type: string
                            example: isinstance("graph_root") and name=="root" -[0:1]->
            responses:
                "200":
                    description: "The result of this query in the defined format"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Graph"
                        application/x-ndjson:
                            schema:
                                oneOf:
                                    - $ref: "#/components/schemas/NodeInGraph"
                                    - $ref: "#/components/schemas/Edge"
    /graph/{graph_id}/reported/query/aggregate:
        post:
            summary: "Query the aggregate function on the specified graph and return the aggregation result."
            tags:
                - graph_reported
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The aggregation query to perform"
                content:
                    text/plain:
                        schema:
                            type: string
                            example: |
                                aggregate(kind: count(id) as nodes): isinstance("node")
            responses:
                "200":
                    description: "The result of this query in the defined format"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Aggregated"
                        application/x-ndjson:
                            schema:
                                $ref: "#/components/schemas/Aggregated"
    /graph/{graph_id}/reported/query/explain:
        post:
            summary: "Explain the query execution plan"

            tags:
                - debug
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The query to perform"
                content:
                    text/plain:
                        schema:
                            type: string
                            example: isinstance("graph_root") and name=="root" -[0:1]->
            responses:
                "200":
                    description: "The execution plan of the database"
                    content:
                        application/json:
                            schema:
                                type: object
                                additionalProperties: true
    # endregion

    # region graph desired
    /graph/{graph_id}/desired/node/{node_id}:
        get:
            summary: "Get the node and desired content with the given node id"
            tags:
                - graph_desired
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
                - name: node_id
                  in: path
                  description: "The identifier of the node"
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: "Return the defined desired node"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/DesiredNode"

        patch:
            summary: "Update a node with the given node id"
            tags:
                - graph_desired
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
                - name: node_id
                  in: path
                  description: "The identifier of the node"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The partial object data to patch."
                content:
                    application/json:
                        schema:
                            type: object
                            additionalProperties: true
                            example:
                              {
                                  "name": "Batman"
                              }
            responses:
                "200":
                    description: "Return the patched node"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/DesiredNode"
    /graph/{graph_id}/desired/query:
        post:
            summary: "Query this graph in the desired section"
            tags:
                - graph_desired
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
                - name: format
                  in: header
                  description: "The format of the result to return"
                  required: true
                  schema:
                      type: string
                      enum:
                          - graph
                          - list
                          - cytoscape
            requestBody:
                description: "The query to perform"
                content:
                    text/plain:
                        schema:
                            type: string
                            example: isinstance("graph_root") and name=="Batman" -[0:1]->
            responses:
                "200":
                    description: "The result of this query in the defined format"
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - $ref: "#/components/schemas/Graph"
                                    - type: array
                                      items:
                                          $ref: "#/components/schemas/Node"
                        application/x-ndjson:
                            schema:
                                oneOf:
                                    - $ref: "#/components/schemas/NodeInGraph"
                                    - $ref: "#/components/schemas/Edge"
    /graph/{graph_id}/desired/query/raw:
        post:
            summary: "Transform the query into the raw database query"
            tags:
                - debug
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The query to perform"
                content:
                    text/plain:
                        schema:
                            type: string
                            example: isinstance("graph_root") and name=="Batman" -[0:1]->
            responses:
                "200":
                    description: "Returns the query as performed by the database."
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/RawQuery"
    /graph/{graph_id}/desired/query/list:
        post:
            summary: "Query the graph in the desired section and return a list."
            tags:
                - graph_desired
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The query to perform"
                content:
                    text/plain:
                        schema:
                            type: string
                            example: isinstance("graph_root") and name=="Batman" -[0:1]->
            responses:
                "200":
                    description: "The result of this query in the defined format"
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Node"
                        application/x-ndjson:
                            schema:
                                $ref: "#/components/schemas/Node"
    /graph/{graph_id}/desired/query/graph:
        post:
            summary: "Query the graph in the desired section and return a graph."
            tags:
                - graph_desired
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The query to perform"
                content:
                    text/plain:
                        schema:
                            type: string
                            example: isinstance("graph_root") and name=="Batman" -[0:1]->
            responses:
                "200":
                    description: "The result of this query in the defined format"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Graph"
                        application/x-ndjson:
                            schema:
                                oneOf:
                                    - $ref: "#/components/schemas/NodeInGraph"
                                    - $ref: "#/components/schemas/Edge"
    /graph/{graph_id}/desired/query/aggregate:
        post:
            summary: "Query the aggregate function on the specified graph and return the aggregation result."
            tags:
                - graph_desired
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The aggregation query to perform"
                content:
                    text/plain:
                        schema:
                            type: string
                            example: |
                                aggregate(kind: count(id) as nodes): isinstance("node")
            responses:
                "200":
                    description: "The result of this query in the defined format"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Aggregated"
                        application/x-ndjson:
                            schema:
                                $ref: "#/components/schemas/Aggregated"
    /graph/{graph_id}/desired/query/explain:
        post:
            summary: "Explain the query execution plan"
            tags:
                - debug
            parameters:
                - name: graph_id
                  in: path
                  description: "The identifier of the graph"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The query to perform"
                content:
                    text/plain:
                        schema:
                            type: string
                            example: isinstance("graph_root") and name=="Batman" -[0:1]->
            responses:
                "200":
                    description: "The execution plan of the database"
                    content:
                        application/json:
                            schema:
                                type: object
                                additionalProperties: true
    # endregion

    # region events
    /events:
        get:
            summary: "[WebSocket] Register as event listener and receive all events."
            description:
                ## WebSocket Endpoint
                The client needs to send all the required headers for a ws connection
                and has to handle the websocket protocol.<br/>
                **Note this can not be tested from within swagger!**

            parameters:
                - name: show
                  in: query
                  description: "All events to show as a comma separated list"
                  required: false
                  explode: false
                  schema:
                      type: string
            tags:
                - system
            responses:
                default:
                    description: ""
    # endregion

    # region subscriptions

    /subscribers:
        get:
            summary: "List all subscriptions"
            description: "Get all subscriptions of all subscribers in the system"
            tags:
                - subscriptions
            responses:
                "200":
                    description: "The list of all subscribers with all subscriptions"
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Subscriber"

    /subscribers/for/{event_type}:
        get:
            summary: "List all subscribers for a given event type"
            description: "Get all subscriptions of registered subscribers"
            tags:
                - subscriptions
            parameters:
                - name: event_type
                  in: path
                  description: "The type of message"
                  required: true
                  schema:
                      type: string

            responses:
                "200":
                    description: "The list of all subscribers which are subscribed"
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Subscriber"

    /subscriber/{subscriber_id}:
        get:
            summary: "Get subscriber by id"
            description: "Get the subscriber with a defined id."
            tags:
                - subscriptions
            parameters:
                - name: subscriber_id
                  in: path
                  description: "The identifier of the subscriber"
                  required: true
                  schema:
                      type: string

            responses:
                "200":
                    description: "The subscriber"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Subscriber"
                "404":
                    description: "No subscriber found"
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: No subscriber with this id
        put:
            summary: "Define subscriber with all subscriptions"
            description: |
                Define or redefine a subscriber with all subscriptions.
                In case the subscriber does not exist, it is created.
                In case the subscriber exist, all subscriptions get replaced.
            tags:
                - subscriptions
            parameters:
                - name: subscriber_id
                  in: path
                  description: "The identifier of the subscriber"
                  required: true
                  schema:
                      type: string
            requestBody:
                description: "The list of all subscriptions."
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                $ref: "#/components/schemas/Subscription"
            responses:
                "200":
                    description: "The subscriber"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Subscriber"
        delete:
            summary: "Delete by id"
            description: "Delete the subscriber with a defined id."
            tags:
                - subscriptions
            parameters:
                - name: subscriber_id
                  in: path
                  description: "The identifier of the subscriber"
                  required: true
                  schema:
                      type: string

            responses:
                "204":
                    description: "no content"

    /subscriber/{subscriber_id}/{event_type}:
        post:
            summary: "Add subscription to subscriber"
            description: "Add a specific subscription to a subscriber."
            tags:
                - subscriptions
            parameters:
                - name: subscriber_id
                  in: path
                  description: "The identifier of the subscriber"
                  required: true
                  schema:
                      type: string
                - name: event_type
                  in: path
                  description: "The action event type."
                  required: true
                  schema:
                      type: string
                - name: timeout
                  in: query
                  required: false
                  description: |
                      This is the duration in seconds this subscriber has time to execute the action.
                      After this time the sender assumes a failure and rejects the result of this actor.
                  schema:
                      type: number
                      default: 60
                - name: wait_for_completion
                  in: query
                  required: false
                  description: |
                      If an action is sent to this subscriber, the event sender should wait until this
                      subscriber has processed the message and send a done message.
                      This is the expected behaviour of every actor and defaults to true.
                  schema:
                      type: boolean
                      default: true
            responses:
                "200":
                    description: "The subscriber"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Subscriber"
        delete:
            summary: "Delete a specific subscription from the subscriber."
            description: "Delete a specific subscription from the subscriber."
            tags:
                - subscriptions
            parameters:
                - name: subscriber_id
                  in: path
                  description: "The identifier of the subscriber"
                  required: true
                  schema:
                      type: string
                - name: event_type
                  in: path
                  description: "The action event type."
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: "The subscriber"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Subscriber"

    /subscriber/{subscriber_id}/handle:
        get:
            summary: "[WebSocket] Listen to registered events of given subscriber"
            description: |
                ## WebSocket Endpoint
                The client needs to send all the required headers for a ws connection
                and has to handle the websocket protocol.<br/>
                **Note this can not be tested from within swagger!**

                The connection to this endpoint will never be closed.
                All action events of the system this subscriber has registerd will be send to this
                connection.
            tags:
                - subscriptions
            parameters:
                - name: subscriber_id
                  in: path
                  description: "The identifier of the subscriber"
                  required: true
                  schema:
                      type: string

            responses:
                "404":
                    description: "No subscriber found"
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: No subscriber with this id
    # endregion

    # region task queue
    /work/queue:
        get:
            summary: "[WebSocket] Attach to the working queue"
            description: |
                ## WebSocket Endpoint
                The client needs to send all the required headers for a ws connection
                and has to handle the websocket protocol.<br/>
                **Note this can not be tested from within swagger!**

                This endpoint is used by worker nodes which can perform work.
                A worker would use this endpoint to establish a websocket connection and register the tasks
                that can be performed by the worker. One worker can perform one or more tasks over one connection.

                In case the connection is lost, all outstanding tasks are rescheduled to other workers.
                This means the local tasks queue should be wiped in case of connection loss.

                Note: the server tries to spread the number of tasks evenly over the number of workers.
                This number is derived by the number of outstanding messages in the queue irrelevant which tasks
                are outstanding.

            parameters:
                - name: task
                  description: "The name of all tasks that this worker is able to perform."
                  in: query
                  style: form
                  explode: false
                  schema:
                      type: array
                      items:
                          type: string
                - name: filter
                  description: |
                      Additional properties to filter tasks of provided task name.
                      Example: the worker is able to perform tasks of type tag, but only for cloud AWS.
                               cloud=aws could be an additional filter criteria.
                               Maybe the worker is only capable to perform the work in a specific account.
                               cloud=aws&account=123 could be specified to only filter for tasks in this cloud in this
                               account. The available filter criteria are derived from the metadata section of the
                               node.
                  in: query
                  required: false
                  schema:
                      type: object
                      additionalProperties: true
                      example: {"cloud": "aws", "account": "123"}
            tags:
                - work_queue
            responses:
                "200":
                    description: When the connection is established.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    additionalProperties: true
    /work/list:
        get:
            summary: "List all outstanding work items"
            description: |
                All work items that are initiated but not done are listed via this endpoint.
            tags:
                - work_queue
            responses:
                "200":
                    description: The list of all outstanding work items
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        task:
                                            type: object
                                            properties:
                                                task_id:
                                                    type: string
                                                task_name:
                                                    type: string
                                                data:
                                                    type: object
                                                    additionalProperties: true
                                                attrs:
                                                    type: object
                                                    additionalProperties: true
                                        worker:
                                            type: string
                                        retry_counter:
                                            type: integer
                                        deadline:
                                            type: string

    # endregion

    # region cli
    /cli/evaluate:
        post:
            summary: "Evaluate a cli command"
            description: |
                This method can be used to analyze if the command can be interpreted without executing it.
                When this method returns a 200 OK, the command can be parsed and evaluated.
            parameters:
                - name: env
                  description: "All query parameter form the environment passed to the CLI interpreter."
                  in: query
                  schema:
                      type: object
                      additionalProperties: true
            requestBody:
                description: |
                    The command will be sent as request body.
                    A command can contain multiple command line separated by semicolon.
                    Every single line can contain multiple commands that are combined via the pipe operator.
                content:
                    text/plain:
                        schema:
                            type: string
                            example: json [1,2,3,4,5,6] | count
            tags:
                - cli
            responses:
                "200":
                    description: When the command can be evaluated.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    additionalProperties: true
                "300":
                    description: When the command can not be evaluated.
                    content:
                        text/plain:
                            schema:
                                type: string

    /cli/execute:
        post:
            summary: "Execute a cli command"
            description:  |
                The body defines the command to execute.
                The command is executed and the result is returned to the client.
                Request and execution are synchronized: the request is done, when the command is done.
            parameters:
                - name: env
                  description: "All query parameter form the environment passed to the CLI interpreter."
                  in: query
                  schema:
                      type: object
                      additionalProperties: true
            requestBody:
                description: |
                    The command will be sent as request body.
                    A command can contain multiple command line separated by semicolon.
                    Every single line can contain multiple commands that are combined via the pipe operator.
                content:
                    text/plain:
                        schema:
                            type: string
                            example: json [1,2,3,4,5,6] | count
            tags:
                - cli
            responses:
                "200":
                    description: The result of the command.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    additionalProperties: true
                        application/x-ndjson:
                            schema:
                                type: array
                                items:
                                    type: object
                                    additionalProperties: true

    # endregion

components:
    schemas:
        Subscriber:
            description: "A subscriber has a unique name and a list of subscriptions"
            type: object
            properties:
                id:
                    type: string
                    description: "The identifier of this subscriber"
                subscriptions:
                    type: object
                    description: "The dictionary of subscriptions, where the key is the message type"
                    additionalProperties:
                        $ref: "#/components/schemas/Subscription"
        Subscription:
            description: "The definition of an action subscription"
            type: object
            properties:
                message_type:
                    type: string
                    description: "The name of the action to listen to"
                wait_for_completion:
                    type: boolean
                    description: |
                        If an action is sent to this subscriber, the event sender should wait until this
                        subscriber has processed the message and send a done message.
                        This is the expected behaviour of every actor and defaults to true.
                    default: true
                timeout:
                    type: number
                    description: |
                        This is the duration in seconds this subscriber has time to execute the action.
                        After this time the sender assumes a failure and rejects the result of this actor.
                    default: 60
        Aggregated:
            description: "The result of the aggregation. The properties depend on the aggregation function."
            type: object
            additionalProperties: true
            example: |
                [
                    { "count": 60, "kind": "aws_ec2_instance_type", "mem_avg": 28.45, "mem_max": 64, "mem_min": 1, "mem_total": 1707 },
                    { "count": 105686, "kind": "gcp_machine_type", "mem_avg": 213.57744392143945, "mem_max": 3844, "mem_min": 0.599609375, "mem_total": 22572145.73828125 }
                ]
        BatchUpdate:
            type: object
            properties:
                id:
                    type: string
                    description: "the id of the change."
                created:
                    type: string
                    description: "datetime in utc, when the batch update has been created"
                affected_nodes:
                    type: array
                    items:
                        type: string
                    description: "The root nodes of the subgraphs that will be changed during the update"
            example:
              [
                  {
                      "id": "XYQaijCNJUVc",
                      "created": "2021-06-29T13:53:39.329Z",
                      "affected_nodes": [ "sub_graph_root_1", "sub_graph_root_2" ]
                  }
              ]
        Node:
            type: object
            additionalProperties:  true
            properties:
                kind:
                    type: string
                    description: "The kind of this node."
            example:
              {
                  "kind": "test.person",
                  "name": "Batman",
                  "city": "Gotham"
              }
        NodeInGraph:
            type: object
            properties:
                id:
                    type: string
                    description: "The identifier of this node."
                type:
                    type: string
                reported:
                    $ref: "#/components/schemas/Node"
                desired:
                    type: object
                    additionalProperties: true
                metadata:
                    type: object
                    additionalProperties: true
            example:
              {
                  "type": "node",
                  "id": "id-in-graph",
                  "reported": {
                      "kind": "test.person",
                      "name": "Batman",
                      "city": "Gotham"
                  },
                  "desired": {
                      "clean": true
                  },
                  "metadata": {
                      "version": 1
                  }

              }
        DesiredNode:
            type: object
            properties:
                reported:
                    $ref: "#/components/schemas/Node"
                desired:
                    type: object
                    description: "The desired section does not contain a complete node, but only the desired changes."
                    additionalProperties: true
            example:
              {
                  "reported": {
                      "kind": "test.person",
                      "name": "Batman",
                      "city": "Gotham"
                  },
                  "desired": {
                      "name": "Superman"
                  }
              }
        Edge:
            type: object
            properties:
                from:
                    description: "The id of node to start from"
                    type: string
                to:
                    description: "The id of the node to go to"
                    type: string
            example:
              {
                  "type": "edge",
                  "from": "node_id_of_a_in_graph",
                  "to": "node_id_of_b_in_graph"
              }
        Graph:
            description: "A graph is just an array of nodes and edges"
            type: array
            items:
                discriminator:
                    propertyName: "type"
                    mapping:
                        "node": "#/components/schemas/NodeInGraph"
                        "edge": "#/components/schemas/Edge"
                oneOf:
                    - $ref: "#/components/schemas/NodeInGraph"
                    - $ref: "#/components/schemas/Edge"
        GraphUpdate:
            description: "Summary of a graph change action"
            type: object
            properties:
                nodes_created:
                    description: "The number of nodes that have been created."
                    type: integer
                nodes_updates:
                    description: "The number of nodes that have been updated."
                    type: integer
                nodes_deleted:
                    description: "The number of nodes that have been deleted."
                    type: integer
                edges_created:
                    description: "The number of edges that have been created."
                    type: integer
                edges_updated:
                    description: "The number of edges that have been updated."
                    type: integer
                edges_deleted:
                    description: "The number of edges that have been deleted."
                    type: integer

        Kind:
            description: "Definition of a kind"
            type: array
            items:
                oneOf:
                    -   $ref: '#/components/schemas/StringKind'
                    -   $ref: '#/components/schemas/NumberKind'
                    -   $ref: '#/components/schemas/BooleanKind'
                    -   $ref: '#/components/schemas/DateTimeKind'
                    -   $ref: '#/components/schemas/ArrayKind'
                    -   $ref: '#/components/schemas/DateKind'
                    -   $ref: '#/components/schemas/ComplexKind'
                    -   $ref: '#/components/schemas/StringDictKind'
            example:
              [
                  {
                      "fqn": "test.dice",
                      "runtime_kind": "int32",
                      "description": "A dice has 6 sides.",
                      "minimum": 1,
                      "maximum": 6
                  },
                  {
                      "fqn": "test.social_security_number",
                      "runtime_kind": "string",
                      "description": "A dice has 6 sides.",
                      "pattern": "^(?!666|000|9\\d{2})\\d{3}-(?!00)\\d{2}-(?!0{4})\\d{4}$"
                  },
                  {
                      "fqn": "test.base",
                      "properties": [
                          {
                              "name": "kind",
                              "kind": "string",
                              "required": true,
                              "description": "The kind of this compound type."
                          },
                          {
                              "name": "name",
                              "kind": "string",
                              "description": "The name of the resource.",
                              "required": true
                          },
                          {
                              "name": "tags",
                              "kind": "dictionary",
                              "description": "Tags that describe the resource.",
                              "required": false
                          }
                      ]
                  },
                  {
                      "fqn": "test.person",
                      "properties": [
                          {
                              "name": "fortune",
                              "kind": "test.dice",
                              "description": "The current dice value.",
                              "required": true
                          },
                          {
                              "name": "ssn",
                              "kind": "test.social_security_number",
                              "description": "The social security number of this person.",
                              "required": true
                          }
                      ]
                  }
              ]
        KindBase:
            type: object
            properties:
                fqn:
                    type: string
                    description: "The fully qualified name of the kind"
        SimpleKind:
            type: object
            allOf:
                - $ref: '#/components/schemas/KindBase'
            discriminator:
                propertyName: runtime_kind
                mapping:
                    string: "#/components/schemas/StringKind"
                    int32: "#/components/schemas/NumberKind"
                    int64: "#/components/schemas/NumberKind"
                    float: "#/components/schemas/NumberKind"
                    double: "#/components/schemas/NumberKind"
                    boolean: "#/components/schemas/BooleanKind"
                    date: "#/components/schemas/DateKind"
                    datetime: "#/components/schemas/DateTimeKind"

            properties:
                runtime_kind:
                    type: string
                    enum:
                        - string
                        - int32
                        - int64
                        - float
                        - double
                        - boolean
                        - date
                        - datetime
                    description: "The runtime kind of this kind"
        StringKind:
            type: object
            allOf:
                - $ref: '#/components/schemas/SimpleKind'
            properties:
                min_length:
                    type: string
                    description: "The minimal length of this string"
                max_length:
                    type: string
                    description: "The maximal length of this string"
                pattern:
                    type: string
                    description: "The regexp pattern, that this string has to adhere to"
                enum:
                    type: array
                    items:
                        type: string
                    description: "The allowed values of this string enumerated here"
        NumberKind:
            type: object
            allOf:
                - $ref: '#/components/schemas/SimpleKind'
            properties:
                minimum:
                    oneOf:
                        - type: integer
                        - type: number
                    description: "The minimal value of this number"
                maximum:
                    oneOf:
                        - type: integer
                        - type: number
                    description: "The maximum value of this number"
                enum:
                    type: array
                    items:
                        type: integer
                    description: "The allowed values of this number enumerated here"
        BooleanKind:
            type: object
            allOf:
                - $ref: '#/components/schemas/SimpleKind'
        DateTimeKind:
            type: object
            allOf:
                - $ref: '#/components/schemas/SimpleKind'
        DateKind:
            type: object
            allOf:
                - $ref: '#/components/schemas/SimpleKind'
        ArrayKind:
            type: object
            allOf:
                - $ref: '#/components/schemas/KindBase'
            properties:
                inner:
                    $ref: "#/components/schemas/KindBase"
        Property:
            type: object
            properties:
                name:
                    type: string
                    description: "The name of this property"
                kind:
                    type: string
                    description: "The fully qualified kind of this property"
                required:
                    type: boolean
                    description: "Defines if this property is required or not"
                    default: false
                description:
                    type: string
                    description: "Some human readable description of this property"
        ComplexKind:
            type: object
            allOf:
                - $ref: '#/components/schemas/KindBase'
            properties:
                base:
                    type: string
                    description: "In case of inheritance, this defines the base kind."
                properties:
                    type: array
                    description: "Defines all properties of this complex kind"
                    items:
                        $ref: '#/components/schemas/Property'
        StringDictKind:
            type: object
            description: "A simple dictionary where all keys and values are strings"
            allOf:
                - $ref: '#/components/schemas/KindBase'

        RawQuery:
            type: object
            description: "The raw query as performed by the database"
            properties:
                query:
                    type: string
                    description: "The string representation of the query"
                bind_vars:
                    type: object
                    description: "All binding variables for this query"
                    additionalProperties: true
