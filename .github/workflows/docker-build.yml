name: Build Docker Images

on:
  push:
    tags:
      - "*.*.*"
    branches:
      - main
  pull_request:
    paths:
      - "Dockerfile*"
      - "docker/**"
      - "dockerV2/**"
      - ".github/workflows/docker-build.yml"
  workflow_dispatch:

jobs:
  split-build:
    name: Build split Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Get short commit SHA
        id: sha
        run: echo "::set-output name=short::${GITHUB_SHA::7}"

      - name: Set build platforms
        id: platform
        run: |
          GITHUB_REF="${{ github.ref }}"
          GITHUB_TAG=${GITHUB_REF##*/}
          if [ "${{ github.ref_type }}" = tag ]; then
              echo "::set-output name=targets::linux/amd64,linux/arm64"
              echo "::set-output name=uitag::latest"
              if [[ "$GITHUB_TAG" =~ [0-9]([ab]|rc)[0-9]* ]]; then
                echo "::set-output name=latest::false"
              else
                echo "::set-output name=latest::true"
              fi
          else
              echo "::set-output name=targets::linux/amd64"
              echo "::set-output name=uitag::edge"
              echo "::set-output name=latest::false"
          fi

      - name: Check short commit SHA and build targets
        run: |
          echo ${{ steps.sha.outputs.short }}
          echo ${{ steps.platform.outputs.targets }}
          echo ${{ steps.platform.outputs.uitag }}
          echo ${{ steps.platform.outputs.latest }}

      - name: Docker resotobase meta
        id: basemeta
        uses: docker/metadata-action@v3
        with:
          images: |
            someengineering/resotobase
            ghcr.io/someengineering/resotobase
          flavor: |
            latest=${{ steps.platform.outputs.latest }}
          tags: |
            type=pep440,pattern={{version}}
            type=pep440,pattern={{major}}.{{minor}}
            type=pep440,pattern={{major}}
            type=sha,prefix=
            type=edge
          labels: |
            org.opencontainers.image.title=resotobase
            org.opencontainers.image.description=Resoto base image
            org.opencontainers.image.vendor=Some Engineering Inc.

      - name: Docker resotocore meta
        id: coremeta
        uses: docker/metadata-action@v3
        with:
          images: |
            someengineering/resotocore
            ghcr.io/someengineering/resotocore
          flavor: |
            latest=${{ steps.platform.outputs.latest }}
          tags: |
            type=pep440,pattern={{version}}
            type=pep440,pattern={{major}}.{{minor}}
            type=pep440,pattern={{major}}
            type=sha,prefix=
            type=edge
          labels: |
            org.opencontainers.image.title=resotocore
            org.opencontainers.image.description=Resoto Core
            org.opencontainers.image.vendor=Some Engineering Inc.

      - name: Docker resotoworker meta
        id: workermeta
        uses: docker/metadata-action@v3
        with:
          images: |
            someengineering/resotoworker
            ghcr.io/someengineering/resotoworker
          flavor: |
            latest=${{ steps.platform.outputs.latest }}
          tags: |
            type=pep440,pattern={{version}}
            type=pep440,pattern={{major}}.{{minor}}
            type=pep440,pattern={{major}}
            type=sha,prefix=
            type=edge
          labels: |
            org.opencontainers.image.title=resotoworker
            org.opencontainers.image.description=Resoto Worker
            org.opencontainers.image.vendor=Some Engineering Inc.

      - name: Docker resotometrics meta
        id: metricsmeta
        uses: docker/metadata-action@v3
        with:
          images: |
            someengineering/resotometrics
            ghcr.io/someengineering/resotometrics
          flavor: |
            latest=${{ steps.platform.outputs.latest }}
          tags: |
            type=pep440,pattern={{version}}
            type=pep440,pattern={{major}}.{{minor}}
            type=pep440,pattern={{major}}
            type=sha,prefix=
            type=edge
          labels: |
            org.opencontainers.image.title=resotometrics
            org.opencontainers.image.description=Resoto Metrics
            org.opencontainers.image.vendor=Some Engineering Inc.

      - name: Docker resotoshell meta
        id: shellmeta
        uses: docker/metadata-action@v3
        with:
          images: |
            someengineering/resotoshell
            someengineering/resh
            ghcr.io/someengineering/resotoshell
            ghcr.io/someengineering/resh
          flavor: |
            latest=${{ steps.platform.outputs.latest }}
          tags: |
            type=pep440,pattern={{version}}
            type=pep440,pattern={{major}}.{{minor}}
            type=pep440,pattern={{major}}
            type=sha,prefix=
            type=edge
          labels: |
            org.opencontainers.image.title=resotoshell
            org.opencontainers.image.description=Resoto Shell (resh)
            org.opencontainers.image.vendor=Some Engineering Inc.

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: base-${{ runner.os }}-${{ secrets.CACHE_VERSION }}-buildx-${{ github.sha }}
          restore-keys: |
            base-${{ runner.os }}-${{ secrets.CACHE_VERSION }}-buildx-

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push resotobase Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.resotobase
          platforms: ${{ steps.platform.outputs.targets }}
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            UI_IMAGE_TAG=${{ steps.platform.outputs.uitag }}
            SOURCE_COMMIT=${{ github.sha }}
            TESTS=false
          tags: ${{ steps.basemeta.outputs.tags }}
          labels: ${{ steps.basemeta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Build and push resotocore Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.resotocore
          platforms: ${{ steps.platform.outputs.targets }}
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            IMAGE_TAG=${{ steps.sha.outputs.short }}
          tags: ${{ steps.coremeta.outputs.tags }}
          labels: ${{ steps.coremeta.outputs.labels }}

      - name: Build and push resotoworker Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.resotoworker
          platforms: ${{ steps.platform.outputs.targets }}
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            IMAGE_TAG=${{ steps.sha.outputs.short }}
          tags: ${{ steps.workermeta.outputs.tags }}
          labels: ${{ steps.workermeta.outputs.labels }}

      - name: Build and push resotometrics Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.resotometrics
          platforms: ${{ steps.platform.outputs.targets }}
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            IMAGE_TAG=${{ steps.sha.outputs.short }}
          tags: ${{ steps.metricsmeta.outputs.tags }}
          labels: ${{ steps.metricsmeta.outputs.labels }}

      - name: Build and push resotoshell Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.resotoshell
          platforms: ${{ steps.platform.outputs.targets }}
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            IMAGE_TAG=${{ steps.sha.outputs.short }}
          tags: ${{ steps.shellmeta.outputs.tags }}
          labels: ${{ steps.shellmeta.outputs.labels }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  edge-docs:
    name: Update edge API Documentation
    if: github.ref_type == 'branch' # on every commit to main
    needs:
      - split-build
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Check out someengineering/resoto.com
        uses: actions/checkout@v3
        with:
          repository: someengineering/resoto.com
          path: resoto.com
          token: ${{ secrets.SOME_CI_PAT }}

      - name: Update resotocore API YAML
        shell: bash
        run: |
          cp resotocore/resotocore/static/api-doc.yaml resoto.com/openapi/resotocore-edge.yml

      - name: Modify resotocore API YAML
        uses: mikefarah/yq@master
        with:
          cmd: yq e -i '.servers[0].url = "http://localhost:8900" | del(.servers[0].description)' resoto.com/openapi/resotocore-edge.yml

      - name: Format
        working-directory: ./resoto.com
        run: |
          yarn install --frozen-lockfile
          yarn format

      - name: Create someengineering/resoto.com pull request
        uses: peter-evans/create-pull-request@v4
        env:
          HUSKY: 0
        with:
          path: resoto.com
          commit-message: "feat(docs): update edge API documentation"
          title: "feat(docs): update edge API documentation"
          body: |
            Updates `edge` Resoto Core API documentation to reflect changes in [`${{ github.sha }}`](https://github.com/someengineering/resoto/commit/${{ github.sha }}).
          labels: |
            🤖 bot
          branch: api-docs # stable branch name so any additional commits to main update the existing PR instead of creating a new one
          delete-branch: true
          token: ${{ secrets.SOME_CI_PAT }}
          committer: C.K. <98986935+some-ci@users.noreply.github.com>
          author: C.K. <98986935+some-ci@users.noreply.github.com>

  release:
    name: Create Release
    if: github.ref_type == 'tag' # on tagging of releases and prereleases
    needs:
      - split-build
    runs-on: ubuntu-latest

    steps:
      - name: Determine release type
        id: release_type
        shell: bash
        run: |
          if [[ ${{ github.ref }} =~ ^refs/tags/[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo ::set-output name=prerelease::false
          else
            echo ::set-output name=prerelease::true
          fi

      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check out someengineering/resoto.com
        uses: actions/checkout@v3
        with:
          repository: someengineering/resoto.com
          path: resoto.com
          token: ${{ secrets.SOME_CI_PAT }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Generate release notes
        id: release_notes
        shell: bash
        run: |
          mapfile -t tags < <(echo $(curl -sL https://api.github.com/repos/someengineering/resoto/tags?per_page=1) | jq -r '(.[] | .name)')
          echo ::set-output name=tag::${tags[0]}
          prev_release=$(echo $(curl -sL https://api.github.com/repos/someengineering/resoto/releases/latest) | jq -r '.tag_name')
          year=$(date +'%Y')
          date=$(date +'%m-%d')
          dir="resoto.com/news/${year}"
          mkdir -p $dir
          file="${dir}/${date}-${tags[0]}/index.md"
          python tools/release_notes.py ${prev_release} ${tags[0]} > $file
          echo ::set-output name=file::$file
          link="/news/$(date +'%Y/%m/%d')/${tags[0]}"
          echo ::set-output name=link::$link

      - name: Update released version & resotocore API YAML
        if: steps.release_type.outputs.prerelease == 'false'
        shell: bash
        run: |
          cp resotocore/resotocore/static/api-doc.yaml resoto.com/openapi/resotocore.yml
          echo '{"version": "${{ steps.release_notes.outputs.tag }}", "link": "${{ steps.release_notes.outputs.link }}"}' > resoto.com/latestRelease.json

      - name: Modify resotocore API YAML
        if: steps.release_type.outputs.prerelease == 'false'
        uses: mikefarah/yq@master
        with:
          cmd: yq e -i '.servers[0].url = "http://localhost:8900" | del(.servers[0].description)' resoto.com/openapi/resotocore.yml

      - name: Format
        working-directory: ./resoto.com
        run: |
          yarn install --frozen-lockfile
          yarn format

      - name: Create someengineering/resoto.com pull request
        uses: peter-evans/create-pull-request@v4
        env:
          HUSKY: 0
        with:
          path: resoto.com
          commit-message: "feat(news): ${{ steps.release_notes.outputs.tag }} release notes"
          title: "feat(news): ${{ steps.release_notes.outputs.tag }} release notes"
          body: |
            Adds automatically generated release notes for [`${{ steps.release_notes.outputs.tag }}`](https://github.com/someengineering/resoto/releases/tag/${{ steps.release_notes.outputs.tag }}).
          labels: |
            🤖 bot
          branch: ${{ steps.release_notes.outputs.tag }}
          delete-branch: true
          token: ${{ secrets.SOME_CI_PAT }}
          committer: C.K. <98986935+some-ci@users.noreply.github.com>
          author: C.K. <98986935+some-ci@users.noreply.github.com>

      - name: Check out someengineering/helm-charts
        uses: actions/checkout@v3
        if: steps.release_type.outputs.prerelease == 'false'
        with:
          repository: someengineering/helm-charts
          path: helm-charts
          token: ${{ secrets.SOME_CI_PAT }}

      - name: Get current chart version
        id: current_chart_version
        uses: mikefarah/yq@master
        if: steps.release_type.outputs.prerelease == 'false'
        with:
          cmd: yq '.version' helm-charts/someengineering/resoto/Chart.yaml

      - name: Get new chart version
        id: new_chart_version
        uses: WyriHaximus/github-action-next-semvers@v1
        if: steps.release_type.outputs.prerelease == 'false'
        with:
          version: ${{ steps.current_chart_version.outputs.result }}

      - name: Update appVersion and bump chart version
        uses: mikefarah/yq@master
        if: steps.release_type.outputs.prerelease == 'false'
        with:
          cmd: yq e -i '.version = "${{ steps.new_chart_version.outputs.patch }}" | .appVersion = "${{ steps.release_notes.outputs.tag }}"' helm-charts/someengineering/resoto/Chart.yaml

      - name: Set up Helm
        if: steps.release_type.outputs.prerelease == 'false'
        uses: azure/setup-helm@v1
        with:
          version: v3.8.1

      - name: Install helm-docs
        if: steps.release_type.outputs.prerelease == 'false'
        uses: supplypike/setup-bin@v1
        with:
          uri: https://github.com/norwoodj/helm-docs/releases/download/v1.11.0/helm-docs_1.11.0_Linux_x86_64.tar.gz
          name: helm-docs
          version: "1.11.0"

      - name: Generate helm-charts README.md
        if: steps.release_type.outputs.prerelease == 'false'
        run: (cd helm-charts && helm-docs)

      - name: Create someengineering/helm-charts pull request
        uses: peter-evans/create-pull-request@v4
        if: steps.release_type.outputs.prerelease == 'false'
        with:
          path: helm-charts
          commit-message: "chore: bump appVersion to ${{ steps.release_notes.outputs.tag }}"
          title: "chore: bump appVersion to ${{ steps.release_notes.outputs.tag }}"
          body: |
            Bumps Resoto version to [${{ steps.release_notes.outputs.tag }}](https://github.com/someengineering/resoto/releases/tag/${{ steps.release_notes.outputs.tag }}).
          labels: |
            🤖 bot
          branch: release/v${{ steps.release_notes.outputs.tag }}
          delete-branch: true
          token: ${{ secrets.SOME_CI_PAT }}
          committer: C.K. <98986935+some-ci@users.noreply.github.com>
          author: C.K. <98986935+some-ci@users.noreply.github.com>

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: ${{steps.release_type.outputs.prerelease}}
          body: |
            ### Release Notes

            https://resoto.com/${{ steps.release_notes.outputs.link }}

            ### Docker Images

            - `somecr.io/someengineering/resotocore:${{ steps.release_notes.outputs.tag }}`
            - `somecr.io/someengineering/resotoworker:${{ steps.release_notes.outputs.tag }}`
            - `somecr.io/someengineering/resotoshell:${{ steps.release_notes.outputs.tag }}`
            - `somecr.io/someengineering/resotometrics:${{ steps.release_notes.outputs.tag }}`
