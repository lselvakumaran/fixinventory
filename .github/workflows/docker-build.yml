name: Build Docker Images

on:
  push:
    tags:
      - "*.*.*"
    branches:
      - main
  pull_request:
    paths:
      - "Dockerfile*"
      - "docker/**"
      - "dockerV2/**"
      - ".github/workflows/docker-build.yml"
  workflow_dispatch:

jobs:
  split-build:
    name: Build split Docker images
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        if: github.event_name != 'workflow_dispatch'
        uses: actions/checkout@v3

      - name: Get short commit SHA
        if: github.event_name != 'workflow_dispatch'
        id: sha
        run: echo "short=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Create swap for ARM builds
        if: github.ref_type == 'tag' # on tagging of releases and prereleases
        run: |
          echo "Creating 20GB swap files for ARM builds"
          sudo swapoff -a
          sudo rm -f /mnt/swapfile
          time sudo dd if=/dev/zero of=/mnt/swapfile bs=10M count=1000
          sudo chmod 600 /mnt/swapfile
          sudo mkswap /mnt/swapfile
          sudo swapon /mnt/swapfile
          time sudo dd if=/dev/zero of=/swapfile bs=10M count=1000
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          free -m

      - name: Set build platforms
        if: github.event_name != 'workflow_dispatch'
        id: platform
        run: |
          GITHUB_REF="${{ github.ref }}"
          GITHUB_TAG=${GITHUB_REF##*/}
          if [ "${{ github.ref_type }}" = tag ]; then
              echo "targets=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
              echo "uitag=latest" >> $GITHUB_OUTPUT
              if [[ "$GITHUB_TAG" =~ [0-9]([ab]|rc)[0-9]* ]]; then
                echo "latest=false" >> $GITHUB_OUTPUT
              else
                echo "latest=true" >> $GITHUB_OUTPUT
              fi
          else
              echo "targets=linux/amd64" >> $GITHUB_OUTPUT
              echo "uitag=edge" >> $GITHUB_OUTPUT
              echo "latest=false" >> $GITHUB_OUTPUT
          fi

      - name: Check short commit SHA and build targets
        if: github.event_name != 'workflow_dispatch'
        run: |
          echo ${{ steps.sha.outputs.short }}
          echo ${{ steps.platform.outputs.targets }}
          echo ${{ steps.platform.outputs.uitag }}
          echo ${{ steps.platform.outputs.latest }}

      - name: Docker resotobase meta
        if: github.event_name != 'workflow_dispatch'
        id: basemeta
        uses: docker/metadata-action@v4
        with:
          images: |
            someengineering/resotobase
            ghcr.io/someengineering/resotobase
          flavor: |
            latest=${{ steps.platform.outputs.latest }}
          tags: |
            type=pep440,pattern={{version}}
            type=pep440,pattern={{major}}.{{minor}}
            type=pep440,pattern={{major}}
            type=sha,prefix=
            type=edge
          labels: |
            org.opencontainers.image.title=resotobase
            org.opencontainers.image.description=Resoto base image
            org.opencontainers.image.vendor=Some Engineering Inc.

      - name: Docker resotocore meta
        if: github.event_name != 'pull_request' && github.event_name != 'workflow_dispatch'
        id: coremeta
        uses: docker/metadata-action@v3
        with:
          images: |
            someengineering/resotocore
            ghcr.io/someengineering/resotocore
          flavor: |
            latest=${{ steps.platform.outputs.latest }}
          tags: |
            type=pep440,pattern={{version}}
            type=pep440,pattern={{major}}.{{minor}}
            type=pep440,pattern={{major}}
            type=sha,prefix=
            type=edge
          labels: |
            org.opencontainers.image.title=resotocore
            org.opencontainers.image.description=Resoto Core
            org.opencontainers.image.vendor=Some Engineering Inc.

      - name: Docker resotoworker meta
        if: github.event_name != 'pull_request' && github.event_name != 'workflow_dispatch'
        id: workermeta
        uses: docker/metadata-action@v4
        with:
          images: |
            someengineering/resotoworker
            ghcr.io/someengineering/resotoworker
          flavor: |
            latest=${{ steps.platform.outputs.latest }}
          tags: |
            type=pep440,pattern={{version}}
            type=pep440,pattern={{major}}.{{minor}}
            type=pep440,pattern={{major}}
            type=sha,prefix=
            type=edge
          labels: |
            org.opencontainers.image.title=resotoworker
            org.opencontainers.image.description=Resoto Worker
            org.opencontainers.image.vendor=Some Engineering Inc.

      - name: Docker resotometrics meta
        if: github.event_name != 'pull_request' && github.event_name != 'workflow_dispatch'
        id: metricsmeta
        uses: docker/metadata-action@v4
        with:
          images: |
            someengineering/resotometrics
            ghcr.io/someengineering/resotometrics
          flavor: |
            latest=${{ steps.platform.outputs.latest }}
          tags: |
            type=pep440,pattern={{version}}
            type=pep440,pattern={{major}}.{{minor}}
            type=pep440,pattern={{major}}
            type=sha,prefix=
            type=edge
          labels: |
            org.opencontainers.image.title=resotometrics
            org.opencontainers.image.description=Resoto Metrics
            org.opencontainers.image.vendor=Some Engineering Inc.

      - name: Docker resotoshell meta
        if: github.event_name != 'pull_request' && github.event_name != 'workflow_dispatch'
        id: shellmeta
        uses: docker/metadata-action@v4
        with:
          images: |
            someengineering/resotoshell
            someengineering/resh
            ghcr.io/someengineering/resotoshell
            ghcr.io/someengineering/resh
          flavor: |
            latest=${{ steps.platform.outputs.latest }}
          tags: |
            type=pep440,pattern={{version}}
            type=pep440,pattern={{major}}.{{minor}}
            type=pep440,pattern={{major}}
            type=sha,prefix=
            type=edge
          labels: |
            org.opencontainers.image.title=resotoshell
            org.opencontainers.image.description=Resoto Shell (resh)
            org.opencontainers.image.vendor=Some Engineering Inc.

      - name: Set up QEMU
        if: github.event_name != 'workflow_dispatch'
        id: qemu
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        if: github.event_name != 'workflow_dispatch'
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && github.event_name != 'workflow_dispatch'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request' && github.event_name != 'workflow_dispatch'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push resotobase Docker image
        if: github.event_name != 'workflow_dispatch'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.resotobase
          platforms: ${{ steps.platform.outputs.targets }}
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            UI_IMAGE_TAG=${{ steps.platform.outputs.uitag }}
            SOURCE_COMMIT=${{ github.sha }}
            TESTS=false
          tags: ${{ steps.basemeta.outputs.tags }}
          labels: ${{ steps.basemeta.outputs.labels }}

      - name: Build and push resotocore Docker image
        if: github.event_name != 'pull_request' && github.event_name != 'workflow_dispatch'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.resotocore
          platforms: ${{ steps.platform.outputs.targets }}
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            IMAGE_TAG=${{ steps.sha.outputs.short }}
          tags: ${{ steps.coremeta.outputs.tags }}
          labels: ${{ steps.coremeta.outputs.labels }}

      - name: Build and push resotoworker Docker image
        if: github.event_name != 'pull_request' && github.event_name != 'workflow_dispatch'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.resotoworker
          platforms: ${{ steps.platform.outputs.targets }}
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            IMAGE_TAG=${{ steps.sha.outputs.short }}
          tags: ${{ steps.workermeta.outputs.tags }}
          labels: ${{ steps.workermeta.outputs.labels }}

      - name: Build and push resotometrics Docker image
        if: github.event_name != 'pull_request' && github.event_name != 'workflow_dispatch'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.resotometrics
          platforms: ${{ steps.platform.outputs.targets }}
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            IMAGE_TAG=${{ steps.sha.outputs.short }}
          tags: ${{ steps.metricsmeta.outputs.tags }}
          labels: ${{ steps.metricsmeta.outputs.labels }}

      - name: Build and push resotoshell Docker image
        if: github.event_name != 'pull_request' && github.event_name != 'workflow_dispatch'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.resotoshell
          platforms: ${{ steps.platform.outputs.targets }}
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            IMAGE_TAG=${{ steps.sha.outputs.short }}
          tags: ${{ steps.shellmeta.outputs.tags }}
          labels: ${{ steps.shellmeta.outputs.labels }}

  edge-docs:
    name: Update edge docs
    if: github.ref == 'refs/heads/main'
    needs:
      - split-build
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Check out someengineering/resoto.com
        uses: actions/checkout@v3
        with:
          repository: someengineering/resoto.com
          path: resoto.com
          token: ${{ secrets.SOME_CI_PAT }}

      - name: Update resource data models
        if: github.event_name == 'workflow_dispatch' # only when triggered manually
        shell: bash
        run: |
          PSK= RESOTOCORE_ANALYTICS_OPT_OUT=true docker-compose up -d
          cd resoto.com/docs/reference/data-models
          find . -mindepth 2 -type d -name img -prune -exec rm -rf {} \;
          python3 ${{ github.workspace }}/resoto.com/tools/export_model_images.py

      - name: Update resotocore API YAML
        shell: bash
        run: |
          cp resotocore/resotocore/static/api-doc.yaml resoto.com/openapi/resotocore-edge.yml

      - name: Modify resotocore API YAML
        uses: mikefarah/yq@master
        with:
          cmd: yq e -i '.servers[0].url = "https://{host}:{port}" | .servers[0].variables.host.default="localhost" | .servers[0].variables.port.default="8900" | del(.servers[0].description)' resoto.com/openapi/resotocore-edge.yml

      - name: Regenerate API docs & format with Prettier
        working-directory: ./resoto.com
        run: |
          yarn install --frozen-lockfile
          yarn gen-api-docs
          yarn optimize
          yarn format

      - name: Create someengineering/resoto.com pull request
        uses: peter-evans/create-pull-request@v4
        env:
          HUSKY: 0
        with:
          path: resoto.com
          commit-message: "feat(docs): update edge documentation"
          title: "feat(docs): update edge documentation"
          body: |
            Updates `edge` Resoto Core API documentation to reflect changes in [`${{ github.sha }}`](https://github.com/someengineering/resoto/commit/${{ github.sha }}).
          labels: |
            🤖 bot
          branch: api-docs # stable branch name so any additional commits to main update the existing PR instead of creating a new one
          delete-branch: true
          token: ${{ secrets.SOME_CI_PAT }}
          committer: C.K. <98986935+some-ci@users.noreply.github.com>
          author: C.K. <98986935+some-ci@users.noreply.github.com>

  release:
    name: Update stable docs & create release
    if: github.ref_type == 'tag' # on tagging of releases and prereleases
    needs:
      - split-build
    runs-on: ubuntu-latest

    steps:
      - name: Get release tag and type
        id: release
        shell: bash
        run: |
          GITHUB_REF="${{ github.ref }}"
          tag=${GITHUB_REF##*/}
          echo "tag=${tag}" >> $GITHUB_OUTPUT

          if [[ ${{ github.ref }} =~ ^refs/tags/[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "docsVersion=$(cut -d '.' -f 1 <<< ${GITHUB_REF##*/}).X" >> $GITHUB_OUTPUT
          else
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Check out repository
        if: steps.release.outputs.prerelease == 'false'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check out someengineering/resoto.com
        if: steps.release.outputs.prerelease == 'false'
        uses: actions/checkout@v3
        with:
          repository: someengineering/resoto.com
          path: resoto.com
          token: ${{ secrets.SOME_CI_PAT }}

      - name: Install dependencies
        if: steps.release.outputs.prerelease == 'false'
        working-directory: ./resoto.com
        run: |
          yarn install --frozen-lockfile

      - name: Tag docs version
        if: steps.release.outputs.prerelease == 'false'
        continue-on-error: true # Versioned doc may already exist
        working-directory: ./resoto.com
        run: |
          yarn run docusaurus docs:version "${{steps.release.outputs.docsVersion}}"

      - name: Generate release notes
        if: steps.release.outputs.prerelease == 'false'
        id: release_notes
        shell: bash
        run: |
          GITHUB_REF="${{ github.ref }}"
          tag=${GITHUB_REF##*/}
          version_major=$(cut -d '.' -f 1 <<< ${GITHUB_REF##*/})
          prev_release=$(echo $(curl -sL https://api.github.com/repos/someengineering/resoto/releases) | jq -r "map(select(.tag_name | startswith(\"${version_major}.\")) | select(.prerelease == false))[0].tag_name")
          [ -n "$prev_release" ] && prev_release=$(echo $(curl -sL https://api.github.com/repos/someengineering/resoto/releases/latest) | jq -r '.tag_name')
          year=$(date +'%Y')
          date=$(date +'%m-%d')
          dir="resoto.com/news/${year}/${date}-${{ steps.release.outputs.tag }}"
          mkdir -p $dir
          file="${dir}/index.md"
          python3 tools/release_notes.py ${prev_release} ${{ steps.release.outputs.tag }} > $file
          link="/news/$(date +'%Y/%m/%d')/${{ steps.release.outputs.tag }}"
          echo "tag=${{ steps.release.outputs.tag }}" >> $GITHUB_OUTPUT
          echo "file=$file" >> $GITHUB_OUTPUT
          echo "link=$link" >> $GITHUB_OUTPUT

      - name: Update resource data models
        if: steps.release.outputs.prerelease == 'false'
        continue-on-error: true
        shell: bash
        run: |
          PSK= RESOTOCORE_ANALYTICS_OPT_OUT=true docker-compose up -d
          cd resoto.com/versioned_docs/version-${{steps.release.outputs.docsVersion}}/reference/data-models
          find . -mindepth 2 -type d -name img -prune -exec rm -rf {} \;
          python3 ${{ github.workspace }}/resoto.com/tools/export_model_images.py

      - name: Update released version & resotocore API YAML
        if: steps.release.outputs.prerelease == 'false'
        shell: bash
        run: |
          cp resotocore/resotocore/static/api-doc.yaml resoto.com/openapi/resotocore-${{steps.release.outputs.docsVersion}}.yml
          echo $(jq '.["${{steps.release.outputs.docsVersion}}"].version="${{ steps.release.outputs.tag }}" | .["${{steps.release.outputs.docsVersion}}"].link="${{ steps.release_notes.outputs.link }}"' resoto.com/latestRelease.json) > resoto.com/latestRelease.json

      - name: Modify resotocore API YAML
        if: steps.release.outputs.prerelease == 'false'
        uses: mikefarah/yq@master
        with:
          cmd: yq e -i '.servers[0].url = "https://{host}:{port}" | .servers[0].variables.host.default="localhost" | .servers[0].variables.port.default="8900" | del(.servers[0].description)' resoto.com/openapi/resotocore-${{steps.release.outputs.docsVersion}}.yml

      - name: Regenerate API docs & format with Prettier
        if: steps.release.outputs.prerelease == 'false'
        working-directory: ./resoto.com
        run: |
          yarn gen-api-docs
          yarn optimize
          yarn format

      - name: Create someengineering/resoto.com pull request
        if: steps.release.outputs.prerelease == 'false'
        uses: peter-evans/create-pull-request@v4
        env:
          HUSKY: 0
        with:
          path: resoto.com
          commit-message: "feat(news): ${{ steps.release.outputs.tag }} release notes"
          title: "feat(news): ${{ steps.release.outputs.tag }} release notes"
          body: |
            Adds automatically generated release notes for [`${{ steps.release.outputs.tag }}`](https://github.com/someengineering/resoto/releases/tag/${{ steps.release.outputs.tag }}).

            Also updates `${{steps.release.outputs.docsVersion}}` docs.
          labels: |
            🤖 bot
          branch: ${{ steps.release.outputs.tag }}
          delete-branch: true
          token: ${{ secrets.SOME_CI_PAT }}
          committer: C.K. <98986935+some-ci@users.noreply.github.com>
          author: C.K. <98986935+some-ci@users.noreply.github.com>

      - name: Write release body
        shell: bash
        run: |
          [ ${{ steps.release.outputs.prerelease }} == 'false' ] && echo -e "### Release Notes\n\nhttps://resoto.com${{ steps.release_notes.outputs.link }}\n" > release_body.txt
          echo -e "### Docker Images\n" >> release_body.txt
          echo -e "- \`somecr.io/someengineering/resotocore:${{ steps.release.outputs.tag }}\`" >> release_body.txt
          echo -e "- \`somecr.io/someengineering/resotoworker:${{ steps.release.outputs.tag }}\`" >> release_body.txt
          echo -e "- \`somecr.io/someengineering/resotoshell:${{ steps.release.outputs.tag }}\`" >> release_body.txt
          echo -e "- \`somecr.io/someengineering/resotometrics:${{ steps.release.outputs.tag }}\`" >> release_body.txt

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: ${{steps.release.outputs.prerelease}}
          bodyFile: release_body.txt

      - name: Check out someengineering/helm-charts
        uses: actions/checkout@v3
        if: steps.release.outputs.prerelease == 'false'
        with:
          repository: someengineering/helm-charts
          path: helm-charts
          token: ${{ secrets.SOME_CI_PAT }}

      - name: Get current chart version
        id: current_chart_version
        uses: mikefarah/yq@master
        if: steps.release.outputs.prerelease == 'false'
        with:
          cmd: yq '.version' helm-charts/someengineering/resoto/Chart.yaml

      - name: Get new chart version
        id: new_chart_version
        uses: WyriHaximus/github-action-next-semvers@v1
        if: steps.release.outputs.prerelease == 'false'
        with:
          version: ${{ steps.current_chart_version.outputs.result }}

      - name: Update appVersion and bump chart version
        uses: mikefarah/yq@master
        if: steps.release.outputs.prerelease == 'false'
        with:
          cmd: yq e -i '.version = "${{ steps.new_chart_version.outputs.patch }}" | .appVersion = "${{ steps.release.outputs.tag }}"' helm-charts/someengineering/resoto/Chart.yaml

      - name: Set up Helm
        if: steps.release.outputs.prerelease == 'false'
        uses: azure/setup-helm@v1
        with:
          version: v3.8.1

      - name: Install helm-docs
        if: steps.release.outputs.prerelease == 'false'
        uses: supplypike/setup-bin@v1
        with:
          uri: https://github.com/norwoodj/helm-docs/releases/download/v1.11.0/helm-docs_1.11.0_Linux_x86_64.tar.gz
          name: helm-docs
          version: "1.11.0"

      - name: Generate helm-charts README.md
        if: steps.release.outputs.prerelease == 'false'
        run: (cd helm-charts && helm-docs)

      - name: Create someengineering/helm-charts pull request
        uses: peter-evans/create-pull-request@v4
        if: steps.release.outputs.prerelease == 'false'
        with:
          path: helm-charts
          commit-message: "chore: bump appVersion to ${{ steps.release.outputs.tag }}"
          title: "chore: bump appVersion to ${{ steps.release.outputs.tag }}"
          body: |
            Bumps Resoto version to [${{ steps.release.outputs.tag }}](https://github.com/someengineering/resoto/releases/tag/${{ steps.release.outputs.tag }}).
          labels: |
            🤖 bot
          branch: release/v${{ steps.release.outputs.tag }}
          delete-branch: true
          token: ${{ secrets.SOME_CI_PAT }}
          committer: C.K. <98986935+some-ci@users.noreply.github.com>
          author: C.K. <98986935+some-ci@users.noreply.github.com>
