
@startuml

class MessageType {
  name: str
  kind?: Kind
}

package Messages {
    interface Message {
    }
    interface ActionMessage {
      workflow_instance_id: str
      step_name: str
    }
    class Event {
      data: Json
    }
    class ActionDone {
      subscriber_id: str
    }
    class ActionError {
      subscriber_id: str
    }
    Message <|-- Event
    Message <|-- ActionMessage
    ActionMessage <|-- ActionDone
    ActionMessage <|-- ActionError
    ActionMessage <|-- Action
    ActionError ..> Action: processed
    ActionDone ..> Action: processed
}
note right of Message {
- Multiple instances of the same workflow are possible.
- Every instance of a workflow has a unique id.
- Every step in a workflow has a unique name (in the workflow).
- Message ID could be created by {instance_id}::{step_name}
}
note bottom of ActionDone {
subscriber_id is available on the server side.
and is not required to transmit.
safe guard: no other actor can send done on
behalf of a different subscriber.
}


package Workflows {
    class Workflow {
      id: str
      name: str
    }
    interface Step {
      timeout: duration
    }
    class EmitAction {
      message_type: str
    }
    class ExecuteCommand {
       command: str
    }
    class WaitForEvent {
      message_type: str
    }
    Step <|-- EmitAction
    Step <|-- ExecuteCommand
    Step <|-- WaitForEvent
    enum ErrorBehaviour {
        Stop
        Continue
    }
    enum SurpassBehaviour {
        Parallel
        Replace
        Wait
        Drop
    }
    interface Trigger {
    }
    class ByTime
    class ByEvent
    class ByTimeAndEvent

    class WorkflowInstance {
      id: str
      current_step(): Step
    }
    Trigger <|--ByTime
    Trigger <|--ByEvent
    Trigger <|--ByTimeAndEvent
    ByEvent ...> MessageType
    ByTimeAndEvent ...> MessageType
    WorkflowInstance --> Workflow
    WorkflowInstance ..> Step
    Step --> ErrorBehaviour
}

package Subscribers {
    class Subscriber {
       id: str
    }
    class Subscription {
      id: str
      timeout: duration
    }
}
note bottom of Subscriber {
The id of the subscriber is defined
by the subscriber and has to be unique.
Example:
<code>
gce_collector, aws_collector
</code>
}

Subscriber -> Subscription: subscriptions
Subscription ..> MessageType: event

Message ...> WorkflowInstance
Message ..> MessageType
Workflow -> "0..*" Trigger: trigger


Workflow -> "0..*" Step: steps
Step ..> MessageType

Workflow --> "1" SurpassBehaviour: next_run

@enduml

@startuml
interface Step {
  timeout: duration
}
class EmitAction {
  message_type: str
}
class ExecuteCommand {
   command: str
}
class WaitForEvent {
  message_type: str
}
Step <|-- EmitAction
Step <|-- ExecuteCommand
Step <|-- WaitForEvent

note bottom of EmitAction {
- Emits a specified action.
- Waits for all subscribers
  to respond with an ack.
  (wait_for_complete==true)
}
note bottom of ExecuteCommand {
- Executes a specified CLI command.
- Waits for the command to finish.
}
note bottom of WaitForEvent {
- Waits for a specified event to arrive.
}
@enduml
